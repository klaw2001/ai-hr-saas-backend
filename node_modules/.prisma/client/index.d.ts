
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model job
 * 
 */
export type job = $Result.DefaultSelection<Prisma.$jobPayload>
/**
 * Model job_category
 * 
 */
export type job_category = $Result.DefaultSelection<Prisma.$job_categoryPayload>
/**
 * Model job_type
 * 
 */
export type job_type = $Result.DefaultSelection<Prisma.$job_typePayload>
/**
 * Model application
 * 
 */
export type application = $Result.DefaultSelection<Prisma.$applicationPayload>
/**
 * Model jobseeker
 * 
 */
export type jobseeker = $Result.DefaultSelection<Prisma.$jobseekerPayload>
/**
 * Model employer
 * 
 */
export type employer = $Result.DefaultSelection<Prisma.$employerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  JOBSEEKER: 'JOBSEEKER',
  EMPLOYER: 'EMPLOYER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.jobDelegate<ExtArgs>;

  /**
   * `prisma.job_category`: Exposes CRUD operations for the **job_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Job_categories
    * const job_categories = await prisma.job_category.findMany()
    * ```
    */
  get job_category(): Prisma.job_categoryDelegate<ExtArgs>;

  /**
   * `prisma.job_type`: Exposes CRUD operations for the **job_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Job_types
    * const job_types = await prisma.job_type.findMany()
    * ```
    */
  get job_type(): Prisma.job_typeDelegate<ExtArgs>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.applicationDelegate<ExtArgs>;

  /**
   * `prisma.jobseeker`: Exposes CRUD operations for the **jobseeker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobseekers
    * const jobseekers = await prisma.jobseeker.findMany()
    * ```
    */
  get jobseeker(): Prisma.jobseekerDelegate<ExtArgs>;

  /**
   * `prisma.employer`: Exposes CRUD operations for the **employer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employers
    * const employers = await prisma.employer.findMany()
    * ```
    */
  get employer(): Prisma.employerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    job: 'job',
    job_category: 'job_category',
    job_type: 'job_type',
    application: 'application',
    jobseeker: 'jobseeker',
    employer: 'employer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "job" | "job_category" | "job_type" | "application" | "jobseeker" | "employer"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      job: {
        payload: Prisma.$jobPayload<ExtArgs>
        fields: Prisma.jobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.jobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>
          }
          findFirst: {
            args: Prisma.jobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>
          }
          findMany: {
            args: Prisma.jobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>[]
          }
          create: {
            args: Prisma.jobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>
          }
          createMany: {
            args: Prisma.jobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.jobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>[]
          }
          delete: {
            args: Prisma.jobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>
          }
          update: {
            args: Prisma.jobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>
          }
          deleteMany: {
            args: Prisma.jobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.jobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.jobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.jobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.jobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      job_category: {
        payload: Prisma.$job_categoryPayload<ExtArgs>
        fields: Prisma.job_categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.job_categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.job_categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>
          }
          findFirst: {
            args: Prisma.job_categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.job_categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>
          }
          findMany: {
            args: Prisma.job_categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>[]
          }
          create: {
            args: Prisma.job_categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>
          }
          createMany: {
            args: Prisma.job_categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.job_categoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>[]
          }
          delete: {
            args: Prisma.job_categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>
          }
          update: {
            args: Prisma.job_categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>
          }
          deleteMany: {
            args: Prisma.job_categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.job_categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.job_categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_categoryPayload>
          }
          aggregate: {
            args: Prisma.Job_categoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob_category>
          }
          groupBy: {
            args: Prisma.job_categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<Job_categoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.job_categoryCountArgs<ExtArgs>
            result: $Utils.Optional<Job_categoryCountAggregateOutputType> | number
          }
        }
      }
      job_type: {
        payload: Prisma.$job_typePayload<ExtArgs>
        fields: Prisma.job_typeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.job_typeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.job_typeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>
          }
          findFirst: {
            args: Prisma.job_typeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.job_typeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>
          }
          findMany: {
            args: Prisma.job_typeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>[]
          }
          create: {
            args: Prisma.job_typeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>
          }
          createMany: {
            args: Prisma.job_typeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.job_typeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>[]
          }
          delete: {
            args: Prisma.job_typeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>
          }
          update: {
            args: Prisma.job_typeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>
          }
          deleteMany: {
            args: Prisma.job_typeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.job_typeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.job_typeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$job_typePayload>
          }
          aggregate: {
            args: Prisma.Job_typeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob_type>
          }
          groupBy: {
            args: Prisma.job_typeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Job_typeGroupByOutputType>[]
          }
          count: {
            args: Prisma.job_typeCountArgs<ExtArgs>
            result: $Utils.Optional<Job_typeCountAggregateOutputType> | number
          }
        }
      }
      application: {
        payload: Prisma.$applicationPayload<ExtArgs>
        fields: Prisma.applicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.applicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.applicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>
          }
          findFirst: {
            args: Prisma.applicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.applicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>
          }
          findMany: {
            args: Prisma.applicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>[]
          }
          create: {
            args: Prisma.applicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>
          }
          createMany: {
            args: Prisma.applicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.applicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>[]
          }
          delete: {
            args: Prisma.applicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>
          }
          update: {
            args: Prisma.applicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>
          }
          deleteMany: {
            args: Prisma.applicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.applicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.applicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$applicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.applicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.applicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      jobseeker: {
        payload: Prisma.$jobseekerPayload<ExtArgs>
        fields: Prisma.jobseekerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.jobseekerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jobseekerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>
          }
          findFirst: {
            args: Prisma.jobseekerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jobseekerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>
          }
          findMany: {
            args: Prisma.jobseekerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>[]
          }
          create: {
            args: Prisma.jobseekerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>
          }
          createMany: {
            args: Prisma.jobseekerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.jobseekerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>[]
          }
          delete: {
            args: Prisma.jobseekerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>
          }
          update: {
            args: Prisma.jobseekerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>
          }
          deleteMany: {
            args: Prisma.jobseekerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.jobseekerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.jobseekerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jobseekerPayload>
          }
          aggregate: {
            args: Prisma.JobseekerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobseeker>
          }
          groupBy: {
            args: Prisma.jobseekerGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobseekerGroupByOutputType>[]
          }
          count: {
            args: Prisma.jobseekerCountArgs<ExtArgs>
            result: $Utils.Optional<JobseekerCountAggregateOutputType> | number
          }
        }
      }
      employer: {
        payload: Prisma.$employerPayload<ExtArgs>
        fields: Prisma.employerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.employerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.employerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>
          }
          findFirst: {
            args: Prisma.employerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.employerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>
          }
          findMany: {
            args: Prisma.employerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>[]
          }
          create: {
            args: Prisma.employerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>
          }
          createMany: {
            args: Prisma.employerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.employerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>[]
          }
          delete: {
            args: Prisma.employerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>
          }
          update: {
            args: Prisma.employerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>
          }
          deleteMany: {
            args: Prisma.employerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.employerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.employerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employerPayload>
          }
          aggregate: {
            args: Prisma.EmployerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployer>
          }
          groupBy: {
            args: Prisma.employerGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployerGroupByOutputType>[]
          }
          count: {
            args: Prisma.employerCountArgs<ExtArgs>
            result: $Utils.Optional<EmployerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    applications: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | JobCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: applicationWhereInput
  }


  /**
   * Count Type Job_categoryCountOutputType
   */

  export type Job_categoryCountOutputType = {
    job: number
  }

  export type Job_categoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | Job_categoryCountOutputTypeCountJobArgs
  }

  // Custom InputTypes
  /**
   * Job_categoryCountOutputType without action
   */
  export type Job_categoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job_categoryCountOutputType
     */
    select?: Job_categoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Job_categoryCountOutputType without action
   */
  export type Job_categoryCountOutputTypeCountJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobWhereInput
  }


  /**
   * Count Type Job_typeCountOutputType
   */

  export type Job_typeCountOutputType = {
    job: number
  }

  export type Job_typeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | Job_typeCountOutputTypeCountJobArgs
  }

  // Custom InputTypes
  /**
   * Job_typeCountOutputType without action
   */
  export type Job_typeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job_typeCountOutputType
     */
    select?: Job_typeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Job_typeCountOutputType without action
   */
  export type Job_typeCountOutputTypeCountJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobWhereInput
  }


  /**
   * Count Type JobseekerCountOutputType
   */

  export type JobseekerCountOutputType = {
    application: number
  }

  export type JobseekerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | JobseekerCountOutputTypeCountApplicationArgs
  }

  // Custom InputTypes
  /**
   * JobseekerCountOutputType without action
   */
  export type JobseekerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobseekerCountOutputType
     */
    select?: JobseekerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobseekerCountOutputType without action
   */
  export type JobseekerCountOutputTypeCountApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: applicationWhereInput
  }


  /**
   * Count Type EmployerCountOutputType
   */

  export type EmployerCountOutputType = {
    job: number
  }

  export type EmployerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | EmployerCountOutputTypeCountJobArgs
  }

  // Custom InputTypes
  /**
   * EmployerCountOutputType without action
   */
  export type EmployerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerCountOutputType
     */
    select?: EmployerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployerCountOutputType without action
   */
  export type EmployerCountOutputTypeCountJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    user_email: string | null
    user_password: string | null
    user_role: $Enums.Role | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    user_email: string | null
    user_password: string | null
    user_role: $Enums.Role | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    user_email: number
    user_password: number
    user_role: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    user_email?: true
    user_password?: true
    user_role?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    user_email?: true
    user_password?: true
    user_role?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    user_email?: true
    user_password?: true
    user_role?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    user_email: string
    user_password: string
    user_role: $Enums.Role
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    user_email?: boolean
    user_password?: boolean
    user_role?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    jobseeker?: boolean | user$jobseekerArgs<ExtArgs>
    employer?: boolean | user$employerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    user_email?: boolean
    user_password?: boolean
    user_role?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    user_id?: boolean
    user_email?: boolean
    user_password?: boolean
    user_role?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobseeker?: boolean | user$jobseekerArgs<ExtArgs>
    employer?: boolean | user$employerArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      jobseeker: Prisma.$jobseekerPayload<ExtArgs> | null
      employer: Prisma.$employerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      user_email: string
      user_password: string
      user_role: $Enums.Role
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `user_id`
     * const userWithUser_idOnly = await prisma.user.createManyAndReturn({ 
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobseeker<T extends user$jobseekerArgs<ExtArgs> = {}>(args?: Subset<T, user$jobseekerArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    employer<T extends user$employerArgs<ExtArgs> = {}>(args?: Subset<T, user$employerArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly user_id: FieldRef<"user", 'Int'>
    readonly user_email: FieldRef<"user", 'String'>
    readonly user_password: FieldRef<"user", 'String'>
    readonly user_role: FieldRef<"user", 'Role'>
    readonly is_active: FieldRef<"user", 'Boolean'>
    readonly created_at: FieldRef<"user", 'DateTime'>
    readonly updated_at: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.jobseeker
   */
  export type user$jobseekerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    where?: jobseekerWhereInput
  }

  /**
   * user.employer
   */
  export type user$employerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    where?: employerWhereInput
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    job_id: number | null
    job_category_id: number | null
    job_type_id: number | null
    job_employer_id: number | null
  }

  export type JobSumAggregateOutputType = {
    job_id: number | null
    job_category_id: number | null
    job_type_id: number | null
    job_employer_id: number | null
  }

  export type JobMinAggregateOutputType = {
    job_id: number | null
    job_title: string | null
    job_description: string | null
    job_location: string | null
    job_category_id: number | null
    job_type_id: number | null
    job_city: string | null
    job_state: string | null
    job_country: string | null
    job_salary: string | null
    job_remote: boolean | null
    job_employer_id: number | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type JobMaxAggregateOutputType = {
    job_id: number | null
    job_title: string | null
    job_description: string | null
    job_location: string | null
    job_category_id: number | null
    job_type_id: number | null
    job_city: string | null
    job_state: string | null
    job_country: string | null
    job_salary: string | null
    job_remote: boolean | null
    job_employer_id: number | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type JobCountAggregateOutputType = {
    job_id: number
    job_title: number
    job_description: number
    job_location: number
    job_category_id: number
    job_type_id: number
    job_city: number
    job_state: number
    job_country: number
    job_salary: number
    job_remote: number
    job_tags: number
    job_employer_id: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    job_id?: true
    job_category_id?: true
    job_type_id?: true
    job_employer_id?: true
  }

  export type JobSumAggregateInputType = {
    job_id?: true
    job_category_id?: true
    job_type_id?: true
    job_employer_id?: true
  }

  export type JobMinAggregateInputType = {
    job_id?: true
    job_title?: true
    job_description?: true
    job_location?: true
    job_category_id?: true
    job_type_id?: true
    job_city?: true
    job_state?: true
    job_country?: true
    job_salary?: true
    job_remote?: true
    job_employer_id?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type JobMaxAggregateInputType = {
    job_id?: true
    job_title?: true
    job_description?: true
    job_location?: true
    job_category_id?: true
    job_type_id?: true
    job_city?: true
    job_state?: true
    job_country?: true
    job_salary?: true
    job_remote?: true
    job_employer_id?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type JobCountAggregateInputType = {
    job_id?: true
    job_title?: true
    job_description?: true
    job_location?: true
    job_category_id?: true
    job_type_id?: true
    job_city?: true
    job_state?: true
    job_country?: true
    job_salary?: true
    job_remote?: true
    job_tags?: true
    job_employer_id?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which job to aggregate.
     */
    where?: jobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     */
    orderBy?: jobOrderByWithRelationInput | jobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type jobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobWhereInput
    orderBy?: jobOrderByWithAggregationInput | jobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: jobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    job_id: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_type_id: number
    job_city: string | null
    job_state: string | null
    job_country: string | null
    job_salary: string | null
    job_remote: boolean | null
    job_tags: string[]
    job_employer_id: number
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends jobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type jobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    job_id?: boolean
    job_title?: boolean
    job_description?: boolean
    job_location?: boolean
    job_category_id?: boolean
    job_type_id?: boolean
    job_city?: boolean
    job_state?: boolean
    job_country?: boolean
    job_salary?: boolean
    job_remote?: boolean
    job_tags?: boolean
    job_employer_id?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    employer?: boolean | employerDefaultArgs<ExtArgs>
    applications?: boolean | job$applicationsArgs<ExtArgs>
    job_category?: boolean | job_categoryDefaultArgs<ExtArgs>
    job_type?: boolean | job_typeDefaultArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type jobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    job_id?: boolean
    job_title?: boolean
    job_description?: boolean
    job_location?: boolean
    job_category_id?: boolean
    job_type_id?: boolean
    job_city?: boolean
    job_state?: boolean
    job_country?: boolean
    job_salary?: boolean
    job_remote?: boolean
    job_tags?: boolean
    job_employer_id?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    employer?: boolean | employerDefaultArgs<ExtArgs>
    job_category?: boolean | job_categoryDefaultArgs<ExtArgs>
    job_type?: boolean | job_typeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type jobSelectScalar = {
    job_id?: boolean
    job_title?: boolean
    job_description?: boolean
    job_location?: boolean
    job_category_id?: boolean
    job_type_id?: boolean
    job_city?: boolean
    job_state?: boolean
    job_country?: boolean
    job_salary?: boolean
    job_remote?: boolean
    job_tags?: boolean
    job_employer_id?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type jobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employer?: boolean | employerDefaultArgs<ExtArgs>
    applications?: boolean | job$applicationsArgs<ExtArgs>
    job_category?: boolean | job_categoryDefaultArgs<ExtArgs>
    job_type?: boolean | job_typeDefaultArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type jobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employer?: boolean | employerDefaultArgs<ExtArgs>
    job_category?: boolean | job_categoryDefaultArgs<ExtArgs>
    job_type?: boolean | job_typeDefaultArgs<ExtArgs>
  }

  export type $jobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "job"
    objects: {
      employer: Prisma.$employerPayload<ExtArgs>
      applications: Prisma.$applicationPayload<ExtArgs>[]
      job_category: Prisma.$job_categoryPayload<ExtArgs>
      job_type: Prisma.$job_typePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      job_id: number
      job_title: string
      job_description: string
      job_location: string
      job_category_id: number
      job_type_id: number
      job_city: string | null
      job_state: string | null
      job_country: string | null
      job_salary: string | null
      job_remote: boolean | null
      job_tags: string[]
      job_employer_id: number
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type jobGetPayload<S extends boolean | null | undefined | jobDefaultArgs> = $Result.GetResult<Prisma.$jobPayload, S>

  type jobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<jobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface jobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['job'], meta: { name: 'job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {jobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends jobFindUniqueArgs>(args: SelectSubset<T, jobFindUniqueArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {jobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends jobFindUniqueOrThrowArgs>(args: SelectSubset<T, jobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends jobFindFirstArgs>(args?: SelectSubset<T, jobFindFirstArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends jobFindFirstOrThrowArgs>(args?: SelectSubset<T, jobFindFirstOrThrowArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `job_id`
     * const jobWithJob_idOnly = await prisma.job.findMany({ select: { job_id: true } })
     * 
     */
    findMany<T extends jobFindManyArgs>(args?: SelectSubset<T, jobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job.
     * @param {jobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends jobCreateArgs>(args: SelectSubset<T, jobCreateArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobs.
     * @param {jobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends jobCreateManyArgs>(args?: SelectSubset<T, jobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {jobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `job_id`
     * const jobWithJob_idOnly = await prisma.job.createManyAndReturn({ 
     *   select: { job_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends jobCreateManyAndReturnArgs>(args?: SelectSubset<T, jobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job.
     * @param {jobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends jobDeleteArgs>(args: SelectSubset<T, jobDeleteArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job.
     * @param {jobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends jobUpdateArgs>(args: SelectSubset<T, jobUpdateArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobs.
     * @param {jobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends jobDeleteManyArgs>(args?: SelectSubset<T, jobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends jobUpdateManyArgs>(args: SelectSubset<T, jobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {jobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends jobUpsertArgs>(args: SelectSubset<T, jobUpsertArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends jobCountArgs>(
      args?: Subset<T, jobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends jobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: jobGroupByArgs['orderBy'] }
        : { orderBy?: jobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, jobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the job model
   */
  readonly fields: jobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__jobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employer<T extends employerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, employerDefaultArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    applications<T extends job$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, job$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "findMany"> | Null>
    job_category<T extends job_categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, job_categoryDefaultArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    job_type<T extends job_typeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, job_typeDefaultArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the job model
   */ 
  interface jobFieldRefs {
    readonly job_id: FieldRef<"job", 'Int'>
    readonly job_title: FieldRef<"job", 'String'>
    readonly job_description: FieldRef<"job", 'String'>
    readonly job_location: FieldRef<"job", 'String'>
    readonly job_category_id: FieldRef<"job", 'Int'>
    readonly job_type_id: FieldRef<"job", 'Int'>
    readonly job_city: FieldRef<"job", 'String'>
    readonly job_state: FieldRef<"job", 'String'>
    readonly job_country: FieldRef<"job", 'String'>
    readonly job_salary: FieldRef<"job", 'String'>
    readonly job_remote: FieldRef<"job", 'Boolean'>
    readonly job_tags: FieldRef<"job", 'String[]'>
    readonly job_employer_id: FieldRef<"job", 'Int'>
    readonly is_active: FieldRef<"job", 'Boolean'>
    readonly created_at: FieldRef<"job", 'DateTime'>
    readonly updated_at: FieldRef<"job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * job findUnique
   */
  export type jobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * Filter, which job to fetch.
     */
    where: jobWhereUniqueInput
  }

  /**
   * job findUniqueOrThrow
   */
  export type jobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * Filter, which job to fetch.
     */
    where: jobWhereUniqueInput
  }

  /**
   * job findFirst
   */
  export type jobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * Filter, which job to fetch.
     */
    where?: jobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     */
    orderBy?: jobOrderByWithRelationInput | jobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobs.
     */
    cursor?: jobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * job findFirstOrThrow
   */
  export type jobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * Filter, which job to fetch.
     */
    where?: jobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     */
    orderBy?: jobOrderByWithRelationInput | jobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobs.
     */
    cursor?: jobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * job findMany
   */
  export type jobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * Filter, which jobs to fetch.
     */
    where?: jobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     */
    orderBy?: jobOrderByWithRelationInput | jobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jobs.
     */
    cursor?: jobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * job create
   */
  export type jobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * The data needed to create a job.
     */
    data: XOR<jobCreateInput, jobUncheckedCreateInput>
  }

  /**
   * job createMany
   */
  export type jobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jobs.
     */
    data: jobCreateManyInput | jobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * job createManyAndReturn
   */
  export type jobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many jobs.
     */
    data: jobCreateManyInput | jobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * job update
   */
  export type jobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * The data needed to update a job.
     */
    data: XOR<jobUpdateInput, jobUncheckedUpdateInput>
    /**
     * Choose, which job to update.
     */
    where: jobWhereUniqueInput
  }

  /**
   * job updateMany
   */
  export type jobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jobs.
     */
    data: XOR<jobUpdateManyMutationInput, jobUncheckedUpdateManyInput>
    /**
     * Filter which jobs to update
     */
    where?: jobWhereInput
  }

  /**
   * job upsert
   */
  export type jobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * The filter to search for the job to update in case it exists.
     */
    where: jobWhereUniqueInput
    /**
     * In case the job found by the `where` argument doesn't exist, create a new job with this data.
     */
    create: XOR<jobCreateInput, jobUncheckedCreateInput>
    /**
     * In case the job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jobUpdateInput, jobUncheckedUpdateInput>
  }

  /**
   * job delete
   */
  export type jobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    /**
     * Filter which job to delete.
     */
    where: jobWhereUniqueInput
  }

  /**
   * job deleteMany
   */
  export type jobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jobs to delete
     */
    where?: jobWhereInput
  }

  /**
   * job.applications
   */
  export type job$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    where?: applicationWhereInput
    orderBy?: applicationOrderByWithRelationInput | applicationOrderByWithRelationInput[]
    cursor?: applicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * job without action
   */
  export type jobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
  }


  /**
   * Model job_category
   */

  export type AggregateJob_category = {
    _count: Job_categoryCountAggregateOutputType | null
    _avg: Job_categoryAvgAggregateOutputType | null
    _sum: Job_categorySumAggregateOutputType | null
    _min: Job_categoryMinAggregateOutputType | null
    _max: Job_categoryMaxAggregateOutputType | null
  }

  export type Job_categoryAvgAggregateOutputType = {
    job_category_id: number | null
  }

  export type Job_categorySumAggregateOutputType = {
    job_category_id: number | null
  }

  export type Job_categoryMinAggregateOutputType = {
    job_category_id: number | null
    job_category_name: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Job_categoryMaxAggregateOutputType = {
    job_category_id: number | null
    job_category_name: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Job_categoryCountAggregateOutputType = {
    job_category_id: number
    job_category_name: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Job_categoryAvgAggregateInputType = {
    job_category_id?: true
  }

  export type Job_categorySumAggregateInputType = {
    job_category_id?: true
  }

  export type Job_categoryMinAggregateInputType = {
    job_category_id?: true
    job_category_name?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type Job_categoryMaxAggregateInputType = {
    job_category_id?: true
    job_category_name?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type Job_categoryCountAggregateInputType = {
    job_category_id?: true
    job_category_name?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Job_categoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which job_category to aggregate.
     */
    where?: job_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_categories to fetch.
     */
    orderBy?: job_categoryOrderByWithRelationInput | job_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: job_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned job_categories
    **/
    _count?: true | Job_categoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Job_categoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Job_categorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Job_categoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Job_categoryMaxAggregateInputType
  }

  export type GetJob_categoryAggregateType<T extends Job_categoryAggregateArgs> = {
        [P in keyof T & keyof AggregateJob_category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob_category[P]>
      : GetScalarType<T[P], AggregateJob_category[P]>
  }




  export type job_categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: job_categoryWhereInput
    orderBy?: job_categoryOrderByWithAggregationInput | job_categoryOrderByWithAggregationInput[]
    by: Job_categoryScalarFieldEnum[] | Job_categoryScalarFieldEnum
    having?: job_categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Job_categoryCountAggregateInputType | true
    _avg?: Job_categoryAvgAggregateInputType
    _sum?: Job_categorySumAggregateInputType
    _min?: Job_categoryMinAggregateInputType
    _max?: Job_categoryMaxAggregateInputType
  }

  export type Job_categoryGroupByOutputType = {
    job_category_id: number
    job_category_name: string
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: Job_categoryCountAggregateOutputType | null
    _avg: Job_categoryAvgAggregateOutputType | null
    _sum: Job_categorySumAggregateOutputType | null
    _min: Job_categoryMinAggregateOutputType | null
    _max: Job_categoryMaxAggregateOutputType | null
  }

  type GetJob_categoryGroupByPayload<T extends job_categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Job_categoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Job_categoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Job_categoryGroupByOutputType[P]>
            : GetScalarType<T[P], Job_categoryGroupByOutputType[P]>
        }
      >
    >


  export type job_categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    job_category_id?: boolean
    job_category_name?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    job?: boolean | job_category$jobArgs<ExtArgs>
    _count?: boolean | Job_categoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job_category"]>

  export type job_categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    job_category_id?: boolean
    job_category_name?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["job_category"]>

  export type job_categorySelectScalar = {
    job_category_id?: boolean
    job_category_name?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type job_categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | job_category$jobArgs<ExtArgs>
    _count?: boolean | Job_categoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type job_categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $job_categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "job_category"
    objects: {
      job: Prisma.$jobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      job_category_id: number
      job_category_name: string
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["job_category"]>
    composites: {}
  }

  type job_categoryGetPayload<S extends boolean | null | undefined | job_categoryDefaultArgs> = $Result.GetResult<Prisma.$job_categoryPayload, S>

  type job_categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<job_categoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Job_categoryCountAggregateInputType | true
    }

  export interface job_categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['job_category'], meta: { name: 'job_category' } }
    /**
     * Find zero or one Job_category that matches the filter.
     * @param {job_categoryFindUniqueArgs} args - Arguments to find a Job_category
     * @example
     * // Get one Job_category
     * const job_category = await prisma.job_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends job_categoryFindUniqueArgs>(args: SelectSubset<T, job_categoryFindUniqueArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job_category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {job_categoryFindUniqueOrThrowArgs} args - Arguments to find a Job_category
     * @example
     * // Get one Job_category
     * const job_category = await prisma.job_category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends job_categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, job_categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job_category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_categoryFindFirstArgs} args - Arguments to find a Job_category
     * @example
     * // Get one Job_category
     * const job_category = await prisma.job_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends job_categoryFindFirstArgs>(args?: SelectSubset<T, job_categoryFindFirstArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job_category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_categoryFindFirstOrThrowArgs} args - Arguments to find a Job_category
     * @example
     * // Get one Job_category
     * const job_category = await prisma.job_category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends job_categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, job_categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Job_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Job_categories
     * const job_categories = await prisma.job_category.findMany()
     * 
     * // Get first 10 Job_categories
     * const job_categories = await prisma.job_category.findMany({ take: 10 })
     * 
     * // Only select the `job_category_id`
     * const job_categoryWithJob_category_idOnly = await prisma.job_category.findMany({ select: { job_category_id: true } })
     * 
     */
    findMany<T extends job_categoryFindManyArgs>(args?: SelectSubset<T, job_categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job_category.
     * @param {job_categoryCreateArgs} args - Arguments to create a Job_category.
     * @example
     * // Create one Job_category
     * const Job_category = await prisma.job_category.create({
     *   data: {
     *     // ... data to create a Job_category
     *   }
     * })
     * 
     */
    create<T extends job_categoryCreateArgs>(args: SelectSubset<T, job_categoryCreateArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Job_categories.
     * @param {job_categoryCreateManyArgs} args - Arguments to create many Job_categories.
     * @example
     * // Create many Job_categories
     * const job_category = await prisma.job_category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends job_categoryCreateManyArgs>(args?: SelectSubset<T, job_categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Job_categories and returns the data saved in the database.
     * @param {job_categoryCreateManyAndReturnArgs} args - Arguments to create many Job_categories.
     * @example
     * // Create many Job_categories
     * const job_category = await prisma.job_category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Job_categories and only return the `job_category_id`
     * const job_categoryWithJob_category_idOnly = await prisma.job_category.createManyAndReturn({ 
     *   select: { job_category_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends job_categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, job_categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job_category.
     * @param {job_categoryDeleteArgs} args - Arguments to delete one Job_category.
     * @example
     * // Delete one Job_category
     * const Job_category = await prisma.job_category.delete({
     *   where: {
     *     // ... filter to delete one Job_category
     *   }
     * })
     * 
     */
    delete<T extends job_categoryDeleteArgs>(args: SelectSubset<T, job_categoryDeleteArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job_category.
     * @param {job_categoryUpdateArgs} args - Arguments to update one Job_category.
     * @example
     * // Update one Job_category
     * const job_category = await prisma.job_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends job_categoryUpdateArgs>(args: SelectSubset<T, job_categoryUpdateArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Job_categories.
     * @param {job_categoryDeleteManyArgs} args - Arguments to filter Job_categories to delete.
     * @example
     * // Delete a few Job_categories
     * const { count } = await prisma.job_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends job_categoryDeleteManyArgs>(args?: SelectSubset<T, job_categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Job_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Job_categories
     * const job_category = await prisma.job_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends job_categoryUpdateManyArgs>(args: SelectSubset<T, job_categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job_category.
     * @param {job_categoryUpsertArgs} args - Arguments to update or create a Job_category.
     * @example
     * // Update or create a Job_category
     * const job_category = await prisma.job_category.upsert({
     *   create: {
     *     // ... data to create a Job_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job_category we want to update
     *   }
     * })
     */
    upsert<T extends job_categoryUpsertArgs>(args: SelectSubset<T, job_categoryUpsertArgs<ExtArgs>>): Prisma__job_categoryClient<$Result.GetResult<Prisma.$job_categoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Job_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_categoryCountArgs} args - Arguments to filter Job_categories to count.
     * @example
     * // Count the number of Job_categories
     * const count = await prisma.job_category.count({
     *   where: {
     *     // ... the filter for the Job_categories we want to count
     *   }
     * })
    **/
    count<T extends job_categoryCountArgs>(
      args?: Subset<T, job_categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Job_categoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Job_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Job_categoryAggregateArgs>(args: Subset<T, Job_categoryAggregateArgs>): Prisma.PrismaPromise<GetJob_categoryAggregateType<T>>

    /**
     * Group by Job_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends job_categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: job_categoryGroupByArgs['orderBy'] }
        : { orderBy?: job_categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, job_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJob_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the job_category model
   */
  readonly fields: job_categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for job_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__job_categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends job_category$jobArgs<ExtArgs> = {}>(args?: Subset<T, job_category$jobArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the job_category model
   */ 
  interface job_categoryFieldRefs {
    readonly job_category_id: FieldRef<"job_category", 'Int'>
    readonly job_category_name: FieldRef<"job_category", 'String'>
    readonly is_active: FieldRef<"job_category", 'Boolean'>
    readonly created_at: FieldRef<"job_category", 'DateTime'>
    readonly updated_at: FieldRef<"job_category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * job_category findUnique
   */
  export type job_categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * Filter, which job_category to fetch.
     */
    where: job_categoryWhereUniqueInput
  }

  /**
   * job_category findUniqueOrThrow
   */
  export type job_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * Filter, which job_category to fetch.
     */
    where: job_categoryWhereUniqueInput
  }

  /**
   * job_category findFirst
   */
  export type job_categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * Filter, which job_category to fetch.
     */
    where?: job_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_categories to fetch.
     */
    orderBy?: job_categoryOrderByWithRelationInput | job_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for job_categories.
     */
    cursor?: job_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of job_categories.
     */
    distinct?: Job_categoryScalarFieldEnum | Job_categoryScalarFieldEnum[]
  }

  /**
   * job_category findFirstOrThrow
   */
  export type job_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * Filter, which job_category to fetch.
     */
    where?: job_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_categories to fetch.
     */
    orderBy?: job_categoryOrderByWithRelationInput | job_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for job_categories.
     */
    cursor?: job_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of job_categories.
     */
    distinct?: Job_categoryScalarFieldEnum | Job_categoryScalarFieldEnum[]
  }

  /**
   * job_category findMany
   */
  export type job_categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * Filter, which job_categories to fetch.
     */
    where?: job_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_categories to fetch.
     */
    orderBy?: job_categoryOrderByWithRelationInput | job_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing job_categories.
     */
    cursor?: job_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_categories.
     */
    skip?: number
    distinct?: Job_categoryScalarFieldEnum | Job_categoryScalarFieldEnum[]
  }

  /**
   * job_category create
   */
  export type job_categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a job_category.
     */
    data: XOR<job_categoryCreateInput, job_categoryUncheckedCreateInput>
  }

  /**
   * job_category createMany
   */
  export type job_categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many job_categories.
     */
    data: job_categoryCreateManyInput | job_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * job_category createManyAndReturn
   */
  export type job_categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many job_categories.
     */
    data: job_categoryCreateManyInput | job_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * job_category update
   */
  export type job_categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a job_category.
     */
    data: XOR<job_categoryUpdateInput, job_categoryUncheckedUpdateInput>
    /**
     * Choose, which job_category to update.
     */
    where: job_categoryWhereUniqueInput
  }

  /**
   * job_category updateMany
   */
  export type job_categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update job_categories.
     */
    data: XOR<job_categoryUpdateManyMutationInput, job_categoryUncheckedUpdateManyInput>
    /**
     * Filter which job_categories to update
     */
    where?: job_categoryWhereInput
  }

  /**
   * job_category upsert
   */
  export type job_categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the job_category to update in case it exists.
     */
    where: job_categoryWhereUniqueInput
    /**
     * In case the job_category found by the `where` argument doesn't exist, create a new job_category with this data.
     */
    create: XOR<job_categoryCreateInput, job_categoryUncheckedCreateInput>
    /**
     * In case the job_category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<job_categoryUpdateInput, job_categoryUncheckedUpdateInput>
  }

  /**
   * job_category delete
   */
  export type job_categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
    /**
     * Filter which job_category to delete.
     */
    where: job_categoryWhereUniqueInput
  }

  /**
   * job_category deleteMany
   */
  export type job_categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which job_categories to delete
     */
    where?: job_categoryWhereInput
  }

  /**
   * job_category.job
   */
  export type job_category$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    where?: jobWhereInput
    orderBy?: jobOrderByWithRelationInput | jobOrderByWithRelationInput[]
    cursor?: jobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * job_category without action
   */
  export type job_categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_category
     */
    select?: job_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_categoryInclude<ExtArgs> | null
  }


  /**
   * Model job_type
   */

  export type AggregateJob_type = {
    _count: Job_typeCountAggregateOutputType | null
    _avg: Job_typeAvgAggregateOutputType | null
    _sum: Job_typeSumAggregateOutputType | null
    _min: Job_typeMinAggregateOutputType | null
    _max: Job_typeMaxAggregateOutputType | null
  }

  export type Job_typeAvgAggregateOutputType = {
    job_type_id: number | null
  }

  export type Job_typeSumAggregateOutputType = {
    job_type_id: number | null
  }

  export type Job_typeMinAggregateOutputType = {
    job_type_id: number | null
    job_type_name: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Job_typeMaxAggregateOutputType = {
    job_type_id: number | null
    job_type_name: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Job_typeCountAggregateOutputType = {
    job_type_id: number
    job_type_name: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Job_typeAvgAggregateInputType = {
    job_type_id?: true
  }

  export type Job_typeSumAggregateInputType = {
    job_type_id?: true
  }

  export type Job_typeMinAggregateInputType = {
    job_type_id?: true
    job_type_name?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type Job_typeMaxAggregateInputType = {
    job_type_id?: true
    job_type_name?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type Job_typeCountAggregateInputType = {
    job_type_id?: true
    job_type_name?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Job_typeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which job_type to aggregate.
     */
    where?: job_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_types to fetch.
     */
    orderBy?: job_typeOrderByWithRelationInput | job_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: job_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned job_types
    **/
    _count?: true | Job_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Job_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Job_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Job_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Job_typeMaxAggregateInputType
  }

  export type GetJob_typeAggregateType<T extends Job_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateJob_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob_type[P]>
      : GetScalarType<T[P], AggregateJob_type[P]>
  }




  export type job_typeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: job_typeWhereInput
    orderBy?: job_typeOrderByWithAggregationInput | job_typeOrderByWithAggregationInput[]
    by: Job_typeScalarFieldEnum[] | Job_typeScalarFieldEnum
    having?: job_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Job_typeCountAggregateInputType | true
    _avg?: Job_typeAvgAggregateInputType
    _sum?: Job_typeSumAggregateInputType
    _min?: Job_typeMinAggregateInputType
    _max?: Job_typeMaxAggregateInputType
  }

  export type Job_typeGroupByOutputType = {
    job_type_id: number
    job_type_name: string
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: Job_typeCountAggregateOutputType | null
    _avg: Job_typeAvgAggregateOutputType | null
    _sum: Job_typeSumAggregateOutputType | null
    _min: Job_typeMinAggregateOutputType | null
    _max: Job_typeMaxAggregateOutputType | null
  }

  type GetJob_typeGroupByPayload<T extends job_typeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Job_typeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Job_typeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Job_typeGroupByOutputType[P]>
            : GetScalarType<T[P], Job_typeGroupByOutputType[P]>
        }
      >
    >


  export type job_typeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    job_type_id?: boolean
    job_type_name?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    job?: boolean | job_type$jobArgs<ExtArgs>
    _count?: boolean | Job_typeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job_type"]>

  export type job_typeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    job_type_id?: boolean
    job_type_name?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["job_type"]>

  export type job_typeSelectScalar = {
    job_type_id?: boolean
    job_type_name?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type job_typeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | job_type$jobArgs<ExtArgs>
    _count?: boolean | Job_typeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type job_typeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $job_typePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "job_type"
    objects: {
      job: Prisma.$jobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      job_type_id: number
      job_type_name: string
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["job_type"]>
    composites: {}
  }

  type job_typeGetPayload<S extends boolean | null | undefined | job_typeDefaultArgs> = $Result.GetResult<Prisma.$job_typePayload, S>

  type job_typeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<job_typeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Job_typeCountAggregateInputType | true
    }

  export interface job_typeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['job_type'], meta: { name: 'job_type' } }
    /**
     * Find zero or one Job_type that matches the filter.
     * @param {job_typeFindUniqueArgs} args - Arguments to find a Job_type
     * @example
     * // Get one Job_type
     * const job_type = await prisma.job_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends job_typeFindUniqueArgs>(args: SelectSubset<T, job_typeFindUniqueArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job_type that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {job_typeFindUniqueOrThrowArgs} args - Arguments to find a Job_type
     * @example
     * // Get one Job_type
     * const job_type = await prisma.job_type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends job_typeFindUniqueOrThrowArgs>(args: SelectSubset<T, job_typeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_typeFindFirstArgs} args - Arguments to find a Job_type
     * @example
     * // Get one Job_type
     * const job_type = await prisma.job_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends job_typeFindFirstArgs>(args?: SelectSubset<T, job_typeFindFirstArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job_type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_typeFindFirstOrThrowArgs} args - Arguments to find a Job_type
     * @example
     * // Get one Job_type
     * const job_type = await prisma.job_type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends job_typeFindFirstOrThrowArgs>(args?: SelectSubset<T, job_typeFindFirstOrThrowArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Job_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_typeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Job_types
     * const job_types = await prisma.job_type.findMany()
     * 
     * // Get first 10 Job_types
     * const job_types = await prisma.job_type.findMany({ take: 10 })
     * 
     * // Only select the `job_type_id`
     * const job_typeWithJob_type_idOnly = await prisma.job_type.findMany({ select: { job_type_id: true } })
     * 
     */
    findMany<T extends job_typeFindManyArgs>(args?: SelectSubset<T, job_typeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job_type.
     * @param {job_typeCreateArgs} args - Arguments to create a Job_type.
     * @example
     * // Create one Job_type
     * const Job_type = await prisma.job_type.create({
     *   data: {
     *     // ... data to create a Job_type
     *   }
     * })
     * 
     */
    create<T extends job_typeCreateArgs>(args: SelectSubset<T, job_typeCreateArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Job_types.
     * @param {job_typeCreateManyArgs} args - Arguments to create many Job_types.
     * @example
     * // Create many Job_types
     * const job_type = await prisma.job_type.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends job_typeCreateManyArgs>(args?: SelectSubset<T, job_typeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Job_types and returns the data saved in the database.
     * @param {job_typeCreateManyAndReturnArgs} args - Arguments to create many Job_types.
     * @example
     * // Create many Job_types
     * const job_type = await prisma.job_type.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Job_types and only return the `job_type_id`
     * const job_typeWithJob_type_idOnly = await prisma.job_type.createManyAndReturn({ 
     *   select: { job_type_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends job_typeCreateManyAndReturnArgs>(args?: SelectSubset<T, job_typeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job_type.
     * @param {job_typeDeleteArgs} args - Arguments to delete one Job_type.
     * @example
     * // Delete one Job_type
     * const Job_type = await prisma.job_type.delete({
     *   where: {
     *     // ... filter to delete one Job_type
     *   }
     * })
     * 
     */
    delete<T extends job_typeDeleteArgs>(args: SelectSubset<T, job_typeDeleteArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job_type.
     * @param {job_typeUpdateArgs} args - Arguments to update one Job_type.
     * @example
     * // Update one Job_type
     * const job_type = await prisma.job_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends job_typeUpdateArgs>(args: SelectSubset<T, job_typeUpdateArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Job_types.
     * @param {job_typeDeleteManyArgs} args - Arguments to filter Job_types to delete.
     * @example
     * // Delete a few Job_types
     * const { count } = await prisma.job_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends job_typeDeleteManyArgs>(args?: SelectSubset<T, job_typeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Job_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Job_types
     * const job_type = await prisma.job_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends job_typeUpdateManyArgs>(args: SelectSubset<T, job_typeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job_type.
     * @param {job_typeUpsertArgs} args - Arguments to update or create a Job_type.
     * @example
     * // Update or create a Job_type
     * const job_type = await prisma.job_type.upsert({
     *   create: {
     *     // ... data to create a Job_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job_type we want to update
     *   }
     * })
     */
    upsert<T extends job_typeUpsertArgs>(args: SelectSubset<T, job_typeUpsertArgs<ExtArgs>>): Prisma__job_typeClient<$Result.GetResult<Prisma.$job_typePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Job_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_typeCountArgs} args - Arguments to filter Job_types to count.
     * @example
     * // Count the number of Job_types
     * const count = await prisma.job_type.count({
     *   where: {
     *     // ... the filter for the Job_types we want to count
     *   }
     * })
    **/
    count<T extends job_typeCountArgs>(
      args?: Subset<T, job_typeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Job_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Job_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Job_typeAggregateArgs>(args: Subset<T, Job_typeAggregateArgs>): Prisma.PrismaPromise<GetJob_typeAggregateType<T>>

    /**
     * Group by Job_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {job_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends job_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: job_typeGroupByArgs['orderBy'] }
        : { orderBy?: job_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, job_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJob_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the job_type model
   */
  readonly fields: job_typeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for job_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__job_typeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends job_type$jobArgs<ExtArgs> = {}>(args?: Subset<T, job_type$jobArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the job_type model
   */ 
  interface job_typeFieldRefs {
    readonly job_type_id: FieldRef<"job_type", 'Int'>
    readonly job_type_name: FieldRef<"job_type", 'String'>
    readonly is_active: FieldRef<"job_type", 'Boolean'>
    readonly created_at: FieldRef<"job_type", 'DateTime'>
    readonly updated_at: FieldRef<"job_type", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * job_type findUnique
   */
  export type job_typeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * Filter, which job_type to fetch.
     */
    where: job_typeWhereUniqueInput
  }

  /**
   * job_type findUniqueOrThrow
   */
  export type job_typeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * Filter, which job_type to fetch.
     */
    where: job_typeWhereUniqueInput
  }

  /**
   * job_type findFirst
   */
  export type job_typeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * Filter, which job_type to fetch.
     */
    where?: job_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_types to fetch.
     */
    orderBy?: job_typeOrderByWithRelationInput | job_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for job_types.
     */
    cursor?: job_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of job_types.
     */
    distinct?: Job_typeScalarFieldEnum | Job_typeScalarFieldEnum[]
  }

  /**
   * job_type findFirstOrThrow
   */
  export type job_typeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * Filter, which job_type to fetch.
     */
    where?: job_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_types to fetch.
     */
    orderBy?: job_typeOrderByWithRelationInput | job_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for job_types.
     */
    cursor?: job_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of job_types.
     */
    distinct?: Job_typeScalarFieldEnum | Job_typeScalarFieldEnum[]
  }

  /**
   * job_type findMany
   */
  export type job_typeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * Filter, which job_types to fetch.
     */
    where?: job_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of job_types to fetch.
     */
    orderBy?: job_typeOrderByWithRelationInput | job_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing job_types.
     */
    cursor?: job_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` job_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` job_types.
     */
    skip?: number
    distinct?: Job_typeScalarFieldEnum | Job_typeScalarFieldEnum[]
  }

  /**
   * job_type create
   */
  export type job_typeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * The data needed to create a job_type.
     */
    data: XOR<job_typeCreateInput, job_typeUncheckedCreateInput>
  }

  /**
   * job_type createMany
   */
  export type job_typeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many job_types.
     */
    data: job_typeCreateManyInput | job_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * job_type createManyAndReturn
   */
  export type job_typeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many job_types.
     */
    data: job_typeCreateManyInput | job_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * job_type update
   */
  export type job_typeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * The data needed to update a job_type.
     */
    data: XOR<job_typeUpdateInput, job_typeUncheckedUpdateInput>
    /**
     * Choose, which job_type to update.
     */
    where: job_typeWhereUniqueInput
  }

  /**
   * job_type updateMany
   */
  export type job_typeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update job_types.
     */
    data: XOR<job_typeUpdateManyMutationInput, job_typeUncheckedUpdateManyInput>
    /**
     * Filter which job_types to update
     */
    where?: job_typeWhereInput
  }

  /**
   * job_type upsert
   */
  export type job_typeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * The filter to search for the job_type to update in case it exists.
     */
    where: job_typeWhereUniqueInput
    /**
     * In case the job_type found by the `where` argument doesn't exist, create a new job_type with this data.
     */
    create: XOR<job_typeCreateInput, job_typeUncheckedCreateInput>
    /**
     * In case the job_type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<job_typeUpdateInput, job_typeUncheckedUpdateInput>
  }

  /**
   * job_type delete
   */
  export type job_typeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
    /**
     * Filter which job_type to delete.
     */
    where: job_typeWhereUniqueInput
  }

  /**
   * job_type deleteMany
   */
  export type job_typeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which job_types to delete
     */
    where?: job_typeWhereInput
  }

  /**
   * job_type.job
   */
  export type job_type$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    where?: jobWhereInput
    orderBy?: jobOrderByWithRelationInput | jobOrderByWithRelationInput[]
    cursor?: jobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * job_type without action
   */
  export type job_typeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job_type
     */
    select?: job_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: job_typeInclude<ExtArgs> | null
  }


  /**
   * Model application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    application_id: number | null
    application_job_id: number | null
    application_jobseeker_id: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    application_id: number | null
    application_job_id: number | null
    application_jobseeker_id: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    application_id: number | null
    application_job_id: number | null
    application_jobseeker_id: number | null
    application_status: string | null
    application_message: string | null
    application_resume_url: string | null
    is_active: boolean | null
    applied_at: Date | null
    updated_at: Date | null
  }

  export type ApplicationMaxAggregateOutputType = {
    application_id: number | null
    application_job_id: number | null
    application_jobseeker_id: number | null
    application_status: string | null
    application_message: string | null
    application_resume_url: string | null
    is_active: boolean | null
    applied_at: Date | null
    updated_at: Date | null
  }

  export type ApplicationCountAggregateOutputType = {
    application_id: number
    application_job_id: number
    application_jobseeker_id: number
    application_status: number
    application_message: number
    application_resume_url: number
    is_active: number
    applied_at: number
    updated_at: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    application_id?: true
    application_job_id?: true
    application_jobseeker_id?: true
  }

  export type ApplicationSumAggregateInputType = {
    application_id?: true
    application_job_id?: true
    application_jobseeker_id?: true
  }

  export type ApplicationMinAggregateInputType = {
    application_id?: true
    application_job_id?: true
    application_jobseeker_id?: true
    application_status?: true
    application_message?: true
    application_resume_url?: true
    is_active?: true
    applied_at?: true
    updated_at?: true
  }

  export type ApplicationMaxAggregateInputType = {
    application_id?: true
    application_job_id?: true
    application_jobseeker_id?: true
    application_status?: true
    application_message?: true
    application_resume_url?: true
    is_active?: true
    applied_at?: true
    updated_at?: true
  }

  export type ApplicationCountAggregateInputType = {
    application_id?: true
    application_job_id?: true
    application_jobseeker_id?: true
    application_status?: true
    application_message?: true
    application_resume_url?: true
    is_active?: true
    applied_at?: true
    updated_at?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which application to aggregate.
     */
    where?: applicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationOrderByWithRelationInput | applicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: applicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type applicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: applicationWhereInput
    orderBy?: applicationOrderByWithAggregationInput | applicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: applicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    application_id: number
    application_job_id: number
    application_jobseeker_id: number
    application_status: string
    application_message: string | null
    application_resume_url: string | null
    is_active: boolean
    applied_at: Date
    updated_at: Date
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends applicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type applicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    application_id?: boolean
    application_job_id?: boolean
    application_jobseeker_id?: boolean
    application_status?: boolean
    application_message?: boolean
    application_resume_url?: boolean
    is_active?: boolean
    applied_at?: boolean
    updated_at?: boolean
    job?: boolean | jobDefaultArgs<ExtArgs>
    jobseeker?: boolean | jobseekerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type applicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    application_id?: boolean
    application_job_id?: boolean
    application_jobseeker_id?: boolean
    application_status?: boolean
    application_message?: boolean
    application_resume_url?: boolean
    is_active?: boolean
    applied_at?: boolean
    updated_at?: boolean
    job?: boolean | jobDefaultArgs<ExtArgs>
    jobseeker?: boolean | jobseekerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type applicationSelectScalar = {
    application_id?: boolean
    application_job_id?: boolean
    application_jobseeker_id?: boolean
    application_status?: boolean
    application_message?: boolean
    application_resume_url?: boolean
    is_active?: boolean
    applied_at?: boolean
    updated_at?: boolean
  }

  export type applicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | jobDefaultArgs<ExtArgs>
    jobseeker?: boolean | jobseekerDefaultArgs<ExtArgs>
  }
  export type applicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | jobDefaultArgs<ExtArgs>
    jobseeker?: boolean | jobseekerDefaultArgs<ExtArgs>
  }

  export type $applicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "application"
    objects: {
      job: Prisma.$jobPayload<ExtArgs>
      jobseeker: Prisma.$jobseekerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      application_id: number
      application_job_id: number
      application_jobseeker_id: number
      application_status: string
      application_message: string | null
      application_resume_url: string | null
      is_active: boolean
      applied_at: Date
      updated_at: Date
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type applicationGetPayload<S extends boolean | null | undefined | applicationDefaultArgs> = $Result.GetResult<Prisma.$applicationPayload, S>

  type applicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<applicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface applicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['application'], meta: { name: 'application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {applicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends applicationFindUniqueArgs>(args: SelectSubset<T, applicationFindUniqueArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {applicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends applicationFindUniqueOrThrowArgs>(args: SelectSubset<T, applicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends applicationFindFirstArgs>(args?: SelectSubset<T, applicationFindFirstArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends applicationFindFirstOrThrowArgs>(args?: SelectSubset<T, applicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `application_id`
     * const applicationWithApplication_idOnly = await prisma.application.findMany({ select: { application_id: true } })
     * 
     */
    findMany<T extends applicationFindManyArgs>(args?: SelectSubset<T, applicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Application.
     * @param {applicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends applicationCreateArgs>(args: SelectSubset<T, applicationCreateArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Applications.
     * @param {applicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends applicationCreateManyArgs>(args?: SelectSubset<T, applicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {applicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `application_id`
     * const applicationWithApplication_idOnly = await prisma.application.createManyAndReturn({ 
     *   select: { application_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends applicationCreateManyAndReturnArgs>(args?: SelectSubset<T, applicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Application.
     * @param {applicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends applicationDeleteArgs>(args: SelectSubset<T, applicationDeleteArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Application.
     * @param {applicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends applicationUpdateArgs>(args: SelectSubset<T, applicationUpdateArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Applications.
     * @param {applicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends applicationDeleteManyArgs>(args?: SelectSubset<T, applicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends applicationUpdateManyArgs>(args: SelectSubset<T, applicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {applicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends applicationUpsertArgs>(args: SelectSubset<T, applicationUpsertArgs<ExtArgs>>): Prisma__applicationClient<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends applicationCountArgs>(
      args?: Subset<T, applicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {applicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends applicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: applicationGroupByArgs['orderBy'] }
        : { orderBy?: applicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, applicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the application model
   */
  readonly fields: applicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__applicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends jobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, jobDefaultArgs<ExtArgs>>): Prisma__jobClient<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobseeker<T extends jobseekerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, jobseekerDefaultArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the application model
   */ 
  interface applicationFieldRefs {
    readonly application_id: FieldRef<"application", 'Int'>
    readonly application_job_id: FieldRef<"application", 'Int'>
    readonly application_jobseeker_id: FieldRef<"application", 'Int'>
    readonly application_status: FieldRef<"application", 'String'>
    readonly application_message: FieldRef<"application", 'String'>
    readonly application_resume_url: FieldRef<"application", 'String'>
    readonly is_active: FieldRef<"application", 'Boolean'>
    readonly applied_at: FieldRef<"application", 'DateTime'>
    readonly updated_at: FieldRef<"application", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * application findUnique
   */
  export type applicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * Filter, which application to fetch.
     */
    where: applicationWhereUniqueInput
  }

  /**
   * application findUniqueOrThrow
   */
  export type applicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * Filter, which application to fetch.
     */
    where: applicationWhereUniqueInput
  }

  /**
   * application findFirst
   */
  export type applicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * Filter, which application to fetch.
     */
    where?: applicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationOrderByWithRelationInput | applicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for applications.
     */
    cursor?: applicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * application findFirstOrThrow
   */
  export type applicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * Filter, which application to fetch.
     */
    where?: applicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationOrderByWithRelationInput | applicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for applications.
     */
    cursor?: applicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * application findMany
   */
  export type applicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * Filter, which applications to fetch.
     */
    where?: applicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of applications to fetch.
     */
    orderBy?: applicationOrderByWithRelationInput | applicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing applications.
     */
    cursor?: applicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * application create
   */
  export type applicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * The data needed to create a application.
     */
    data: XOR<applicationCreateInput, applicationUncheckedCreateInput>
  }

  /**
   * application createMany
   */
  export type applicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many applications.
     */
    data: applicationCreateManyInput | applicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * application createManyAndReturn
   */
  export type applicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many applications.
     */
    data: applicationCreateManyInput | applicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * application update
   */
  export type applicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * The data needed to update a application.
     */
    data: XOR<applicationUpdateInput, applicationUncheckedUpdateInput>
    /**
     * Choose, which application to update.
     */
    where: applicationWhereUniqueInput
  }

  /**
   * application updateMany
   */
  export type applicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update applications.
     */
    data: XOR<applicationUpdateManyMutationInput, applicationUncheckedUpdateManyInput>
    /**
     * Filter which applications to update
     */
    where?: applicationWhereInput
  }

  /**
   * application upsert
   */
  export type applicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * The filter to search for the application to update in case it exists.
     */
    where: applicationWhereUniqueInput
    /**
     * In case the application found by the `where` argument doesn't exist, create a new application with this data.
     */
    create: XOR<applicationCreateInput, applicationUncheckedCreateInput>
    /**
     * In case the application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<applicationUpdateInput, applicationUncheckedUpdateInput>
  }

  /**
   * application delete
   */
  export type applicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    /**
     * Filter which application to delete.
     */
    where: applicationWhereUniqueInput
  }

  /**
   * application deleteMany
   */
  export type applicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which applications to delete
     */
    where?: applicationWhereInput
  }

  /**
   * application without action
   */
  export type applicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
  }


  /**
   * Model jobseeker
   */

  export type AggregateJobseeker = {
    _count: JobseekerCountAggregateOutputType | null
    _avg: JobseekerAvgAggregateOutputType | null
    _sum: JobseekerSumAggregateOutputType | null
    _min: JobseekerMinAggregateOutputType | null
    _max: JobseekerMaxAggregateOutputType | null
  }

  export type JobseekerAvgAggregateOutputType = {
    jobseeker_id: number | null
    jobseeker_user_id: number | null
    jobseeker_experience_years: number | null
  }

  export type JobseekerSumAggregateOutputType = {
    jobseeker_id: number | null
    jobseeker_user_id: number | null
    jobseeker_experience_years: number | null
  }

  export type JobseekerMinAggregateOutputType = {
    jobseeker_id: number | null
    jobseeker_user_id: number | null
    jobseeker_full_name: string | null
    jobseeker_phone: string | null
    jobseeker_resume_url: string | null
    jobseeker_experience_years: number | null
    jobseeker_bio: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type JobseekerMaxAggregateOutputType = {
    jobseeker_id: number | null
    jobseeker_user_id: number | null
    jobseeker_full_name: string | null
    jobseeker_phone: string | null
    jobseeker_resume_url: string | null
    jobseeker_experience_years: number | null
    jobseeker_bio: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type JobseekerCountAggregateOutputType = {
    jobseeker_id: number
    jobseeker_user_id: number
    jobseeker_full_name: number
    jobseeker_phone: number
    jobseeker_resume_url: number
    jobseeker_skills: number
    jobseeker_experience_years: number
    jobseeker_bio: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type JobseekerAvgAggregateInputType = {
    jobseeker_id?: true
    jobseeker_user_id?: true
    jobseeker_experience_years?: true
  }

  export type JobseekerSumAggregateInputType = {
    jobseeker_id?: true
    jobseeker_user_id?: true
    jobseeker_experience_years?: true
  }

  export type JobseekerMinAggregateInputType = {
    jobseeker_id?: true
    jobseeker_user_id?: true
    jobseeker_full_name?: true
    jobseeker_phone?: true
    jobseeker_resume_url?: true
    jobseeker_experience_years?: true
    jobseeker_bio?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type JobseekerMaxAggregateInputType = {
    jobseeker_id?: true
    jobseeker_user_id?: true
    jobseeker_full_name?: true
    jobseeker_phone?: true
    jobseeker_resume_url?: true
    jobseeker_experience_years?: true
    jobseeker_bio?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type JobseekerCountAggregateInputType = {
    jobseeker_id?: true
    jobseeker_user_id?: true
    jobseeker_full_name?: true
    jobseeker_phone?: true
    jobseeker_resume_url?: true
    jobseeker_skills?: true
    jobseeker_experience_years?: true
    jobseeker_bio?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type JobseekerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jobseeker to aggregate.
     */
    where?: jobseekerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobseekers to fetch.
     */
    orderBy?: jobseekerOrderByWithRelationInput | jobseekerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jobseekerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobseekers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobseekers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jobseekers
    **/
    _count?: true | JobseekerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobseekerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobseekerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobseekerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobseekerMaxAggregateInputType
  }

  export type GetJobseekerAggregateType<T extends JobseekerAggregateArgs> = {
        [P in keyof T & keyof AggregateJobseeker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobseeker[P]>
      : GetScalarType<T[P], AggregateJobseeker[P]>
  }




  export type jobseekerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jobseekerWhereInput
    orderBy?: jobseekerOrderByWithAggregationInput | jobseekerOrderByWithAggregationInput[]
    by: JobseekerScalarFieldEnum[] | JobseekerScalarFieldEnum
    having?: jobseekerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobseekerCountAggregateInputType | true
    _avg?: JobseekerAvgAggregateInputType
    _sum?: JobseekerSumAggregateInputType
    _min?: JobseekerMinAggregateInputType
    _max?: JobseekerMaxAggregateInputType
  }

  export type JobseekerGroupByOutputType = {
    jobseeker_id: number
    jobseeker_user_id: number
    jobseeker_full_name: string
    jobseeker_phone: string | null
    jobseeker_resume_url: string | null
    jobseeker_skills: string[]
    jobseeker_experience_years: number | null
    jobseeker_bio: string | null
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: JobseekerCountAggregateOutputType | null
    _avg: JobseekerAvgAggregateOutputType | null
    _sum: JobseekerSumAggregateOutputType | null
    _min: JobseekerMinAggregateOutputType | null
    _max: JobseekerMaxAggregateOutputType | null
  }

  type GetJobseekerGroupByPayload<T extends jobseekerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobseekerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobseekerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobseekerGroupByOutputType[P]>
            : GetScalarType<T[P], JobseekerGroupByOutputType[P]>
        }
      >
    >


  export type jobseekerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    jobseeker_id?: boolean
    jobseeker_user_id?: boolean
    jobseeker_full_name?: boolean
    jobseeker_phone?: boolean
    jobseeker_resume_url?: boolean
    jobseeker_skills?: boolean
    jobseeker_experience_years?: boolean
    jobseeker_bio?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    application?: boolean | jobseeker$applicationArgs<ExtArgs>
    _count?: boolean | JobseekerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobseeker"]>

  export type jobseekerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    jobseeker_id?: boolean
    jobseeker_user_id?: boolean
    jobseeker_full_name?: boolean
    jobseeker_phone?: boolean
    jobseeker_resume_url?: boolean
    jobseeker_skills?: boolean
    jobseeker_experience_years?: boolean
    jobseeker_bio?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobseeker"]>

  export type jobseekerSelectScalar = {
    jobseeker_id?: boolean
    jobseeker_user_id?: boolean
    jobseeker_full_name?: boolean
    jobseeker_phone?: boolean
    jobseeker_resume_url?: boolean
    jobseeker_skills?: boolean
    jobseeker_experience_years?: boolean
    jobseeker_bio?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type jobseekerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    application?: boolean | jobseeker$applicationArgs<ExtArgs>
    _count?: boolean | JobseekerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type jobseekerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $jobseekerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "jobseeker"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      application: Prisma.$applicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      jobseeker_id: number
      jobseeker_user_id: number
      jobseeker_full_name: string
      jobseeker_phone: string | null
      jobseeker_resume_url: string | null
      jobseeker_skills: string[]
      jobseeker_experience_years: number | null
      jobseeker_bio: string | null
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["jobseeker"]>
    composites: {}
  }

  type jobseekerGetPayload<S extends boolean | null | undefined | jobseekerDefaultArgs> = $Result.GetResult<Prisma.$jobseekerPayload, S>

  type jobseekerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<jobseekerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobseekerCountAggregateInputType | true
    }

  export interface jobseekerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jobseeker'], meta: { name: 'jobseeker' } }
    /**
     * Find zero or one Jobseeker that matches the filter.
     * @param {jobseekerFindUniqueArgs} args - Arguments to find a Jobseeker
     * @example
     * // Get one Jobseeker
     * const jobseeker = await prisma.jobseeker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends jobseekerFindUniqueArgs>(args: SelectSubset<T, jobseekerFindUniqueArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Jobseeker that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {jobseekerFindUniqueOrThrowArgs} args - Arguments to find a Jobseeker
     * @example
     * // Get one Jobseeker
     * const jobseeker = await prisma.jobseeker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends jobseekerFindUniqueOrThrowArgs>(args: SelectSubset<T, jobseekerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Jobseeker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobseekerFindFirstArgs} args - Arguments to find a Jobseeker
     * @example
     * // Get one Jobseeker
     * const jobseeker = await prisma.jobseeker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends jobseekerFindFirstArgs>(args?: SelectSubset<T, jobseekerFindFirstArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Jobseeker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobseekerFindFirstOrThrowArgs} args - Arguments to find a Jobseeker
     * @example
     * // Get one Jobseeker
     * const jobseeker = await prisma.jobseeker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends jobseekerFindFirstOrThrowArgs>(args?: SelectSubset<T, jobseekerFindFirstOrThrowArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobseekers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobseekerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobseekers
     * const jobseekers = await prisma.jobseeker.findMany()
     * 
     * // Get first 10 Jobseekers
     * const jobseekers = await prisma.jobseeker.findMany({ take: 10 })
     * 
     * // Only select the `jobseeker_id`
     * const jobseekerWithJobseeker_idOnly = await prisma.jobseeker.findMany({ select: { jobseeker_id: true } })
     * 
     */
    findMany<T extends jobseekerFindManyArgs>(args?: SelectSubset<T, jobseekerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Jobseeker.
     * @param {jobseekerCreateArgs} args - Arguments to create a Jobseeker.
     * @example
     * // Create one Jobseeker
     * const Jobseeker = await prisma.jobseeker.create({
     *   data: {
     *     // ... data to create a Jobseeker
     *   }
     * })
     * 
     */
    create<T extends jobseekerCreateArgs>(args: SelectSubset<T, jobseekerCreateArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobseekers.
     * @param {jobseekerCreateManyArgs} args - Arguments to create many Jobseekers.
     * @example
     * // Create many Jobseekers
     * const jobseeker = await prisma.jobseeker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends jobseekerCreateManyArgs>(args?: SelectSubset<T, jobseekerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobseekers and returns the data saved in the database.
     * @param {jobseekerCreateManyAndReturnArgs} args - Arguments to create many Jobseekers.
     * @example
     * // Create many Jobseekers
     * const jobseeker = await prisma.jobseeker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobseekers and only return the `jobseeker_id`
     * const jobseekerWithJobseeker_idOnly = await prisma.jobseeker.createManyAndReturn({ 
     *   select: { jobseeker_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends jobseekerCreateManyAndReturnArgs>(args?: SelectSubset<T, jobseekerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Jobseeker.
     * @param {jobseekerDeleteArgs} args - Arguments to delete one Jobseeker.
     * @example
     * // Delete one Jobseeker
     * const Jobseeker = await prisma.jobseeker.delete({
     *   where: {
     *     // ... filter to delete one Jobseeker
     *   }
     * })
     * 
     */
    delete<T extends jobseekerDeleteArgs>(args: SelectSubset<T, jobseekerDeleteArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Jobseeker.
     * @param {jobseekerUpdateArgs} args - Arguments to update one Jobseeker.
     * @example
     * // Update one Jobseeker
     * const jobseeker = await prisma.jobseeker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends jobseekerUpdateArgs>(args: SelectSubset<T, jobseekerUpdateArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobseekers.
     * @param {jobseekerDeleteManyArgs} args - Arguments to filter Jobseekers to delete.
     * @example
     * // Delete a few Jobseekers
     * const { count } = await prisma.jobseeker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends jobseekerDeleteManyArgs>(args?: SelectSubset<T, jobseekerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobseekers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobseekerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobseekers
     * const jobseeker = await prisma.jobseeker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends jobseekerUpdateManyArgs>(args: SelectSubset<T, jobseekerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jobseeker.
     * @param {jobseekerUpsertArgs} args - Arguments to update or create a Jobseeker.
     * @example
     * // Update or create a Jobseeker
     * const jobseeker = await prisma.jobseeker.upsert({
     *   create: {
     *     // ... data to create a Jobseeker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jobseeker we want to update
     *   }
     * })
     */
    upsert<T extends jobseekerUpsertArgs>(args: SelectSubset<T, jobseekerUpsertArgs<ExtArgs>>): Prisma__jobseekerClient<$Result.GetResult<Prisma.$jobseekerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobseekers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobseekerCountArgs} args - Arguments to filter Jobseekers to count.
     * @example
     * // Count the number of Jobseekers
     * const count = await prisma.jobseeker.count({
     *   where: {
     *     // ... the filter for the Jobseekers we want to count
     *   }
     * })
    **/
    count<T extends jobseekerCountArgs>(
      args?: Subset<T, jobseekerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobseekerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jobseeker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobseekerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobseekerAggregateArgs>(args: Subset<T, JobseekerAggregateArgs>): Prisma.PrismaPromise<GetJobseekerAggregateType<T>>

    /**
     * Group by Jobseeker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobseekerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends jobseekerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: jobseekerGroupByArgs['orderBy'] }
        : { orderBy?: jobseekerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, jobseekerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobseekerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the jobseeker model
   */
  readonly fields: jobseekerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for jobseeker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__jobseekerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    application<T extends jobseeker$applicationArgs<ExtArgs> = {}>(args?: Subset<T, jobseeker$applicationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$applicationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the jobseeker model
   */ 
  interface jobseekerFieldRefs {
    readonly jobseeker_id: FieldRef<"jobseeker", 'Int'>
    readonly jobseeker_user_id: FieldRef<"jobseeker", 'Int'>
    readonly jobseeker_full_name: FieldRef<"jobseeker", 'String'>
    readonly jobseeker_phone: FieldRef<"jobseeker", 'String'>
    readonly jobseeker_resume_url: FieldRef<"jobseeker", 'String'>
    readonly jobseeker_skills: FieldRef<"jobseeker", 'String[]'>
    readonly jobseeker_experience_years: FieldRef<"jobseeker", 'Int'>
    readonly jobseeker_bio: FieldRef<"jobseeker", 'String'>
    readonly is_active: FieldRef<"jobseeker", 'Boolean'>
    readonly created_at: FieldRef<"jobseeker", 'DateTime'>
    readonly updated_at: FieldRef<"jobseeker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * jobseeker findUnique
   */
  export type jobseekerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * Filter, which jobseeker to fetch.
     */
    where: jobseekerWhereUniqueInput
  }

  /**
   * jobseeker findUniqueOrThrow
   */
  export type jobseekerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * Filter, which jobseeker to fetch.
     */
    where: jobseekerWhereUniqueInput
  }

  /**
   * jobseeker findFirst
   */
  export type jobseekerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * Filter, which jobseeker to fetch.
     */
    where?: jobseekerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobseekers to fetch.
     */
    orderBy?: jobseekerOrderByWithRelationInput | jobseekerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobseekers.
     */
    cursor?: jobseekerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobseekers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobseekers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobseekers.
     */
    distinct?: JobseekerScalarFieldEnum | JobseekerScalarFieldEnum[]
  }

  /**
   * jobseeker findFirstOrThrow
   */
  export type jobseekerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * Filter, which jobseeker to fetch.
     */
    where?: jobseekerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobseekers to fetch.
     */
    orderBy?: jobseekerOrderByWithRelationInput | jobseekerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobseekers.
     */
    cursor?: jobseekerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobseekers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobseekers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobseekers.
     */
    distinct?: JobseekerScalarFieldEnum | JobseekerScalarFieldEnum[]
  }

  /**
   * jobseeker findMany
   */
  export type jobseekerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * Filter, which jobseekers to fetch.
     */
    where?: jobseekerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobseekers to fetch.
     */
    orderBy?: jobseekerOrderByWithRelationInput | jobseekerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jobseekers.
     */
    cursor?: jobseekerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobseekers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobseekers.
     */
    skip?: number
    distinct?: JobseekerScalarFieldEnum | JobseekerScalarFieldEnum[]
  }

  /**
   * jobseeker create
   */
  export type jobseekerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * The data needed to create a jobseeker.
     */
    data: XOR<jobseekerCreateInput, jobseekerUncheckedCreateInput>
  }

  /**
   * jobseeker createMany
   */
  export type jobseekerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jobseekers.
     */
    data: jobseekerCreateManyInput | jobseekerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jobseeker createManyAndReturn
   */
  export type jobseekerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many jobseekers.
     */
    data: jobseekerCreateManyInput | jobseekerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * jobseeker update
   */
  export type jobseekerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * The data needed to update a jobseeker.
     */
    data: XOR<jobseekerUpdateInput, jobseekerUncheckedUpdateInput>
    /**
     * Choose, which jobseeker to update.
     */
    where: jobseekerWhereUniqueInput
  }

  /**
   * jobseeker updateMany
   */
  export type jobseekerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jobseekers.
     */
    data: XOR<jobseekerUpdateManyMutationInput, jobseekerUncheckedUpdateManyInput>
    /**
     * Filter which jobseekers to update
     */
    where?: jobseekerWhereInput
  }

  /**
   * jobseeker upsert
   */
  export type jobseekerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * The filter to search for the jobseeker to update in case it exists.
     */
    where: jobseekerWhereUniqueInput
    /**
     * In case the jobseeker found by the `where` argument doesn't exist, create a new jobseeker with this data.
     */
    create: XOR<jobseekerCreateInput, jobseekerUncheckedCreateInput>
    /**
     * In case the jobseeker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jobseekerUpdateInput, jobseekerUncheckedUpdateInput>
  }

  /**
   * jobseeker delete
   */
  export type jobseekerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
    /**
     * Filter which jobseeker to delete.
     */
    where: jobseekerWhereUniqueInput
  }

  /**
   * jobseeker deleteMany
   */
  export type jobseekerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jobseekers to delete
     */
    where?: jobseekerWhereInput
  }

  /**
   * jobseeker.application
   */
  export type jobseeker$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the application
     */
    select?: applicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: applicationInclude<ExtArgs> | null
    where?: applicationWhereInput
    orderBy?: applicationOrderByWithRelationInput | applicationOrderByWithRelationInput[]
    cursor?: applicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * jobseeker without action
   */
  export type jobseekerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jobseeker
     */
    select?: jobseekerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobseekerInclude<ExtArgs> | null
  }


  /**
   * Model employer
   */

  export type AggregateEmployer = {
    _count: EmployerCountAggregateOutputType | null
    _avg: EmployerAvgAggregateOutputType | null
    _sum: EmployerSumAggregateOutputType | null
    _min: EmployerMinAggregateOutputType | null
    _max: EmployerMaxAggregateOutputType | null
  }

  export type EmployerAvgAggregateOutputType = {
    employer_id: number | null
    employer_user_id: number | null
  }

  export type EmployerSumAggregateOutputType = {
    employer_id: number | null
    employer_user_id: number | null
  }

  export type EmployerMinAggregateOutputType = {
    employer_id: number | null
    employer_user_id: number | null
    employer_company_name: string | null
    employer_website: string | null
    employer_location: string | null
    employer_bio: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmployerMaxAggregateOutputType = {
    employer_id: number | null
    employer_user_id: number | null
    employer_company_name: string | null
    employer_website: string | null
    employer_location: string | null
    employer_bio: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmployerCountAggregateOutputType = {
    employer_id: number
    employer_user_id: number
    employer_company_name: number
    employer_website: number
    employer_location: number
    employer_bio: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type EmployerAvgAggregateInputType = {
    employer_id?: true
    employer_user_id?: true
  }

  export type EmployerSumAggregateInputType = {
    employer_id?: true
    employer_user_id?: true
  }

  export type EmployerMinAggregateInputType = {
    employer_id?: true
    employer_user_id?: true
    employer_company_name?: true
    employer_website?: true
    employer_location?: true
    employer_bio?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type EmployerMaxAggregateInputType = {
    employer_id?: true
    employer_user_id?: true
    employer_company_name?: true
    employer_website?: true
    employer_location?: true
    employer_bio?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type EmployerCountAggregateInputType = {
    employer_id?: true
    employer_user_id?: true
    employer_company_name?: true
    employer_website?: true
    employer_location?: true
    employer_bio?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type EmployerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employer to aggregate.
     */
    where?: employerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employers to fetch.
     */
    orderBy?: employerOrderByWithRelationInput | employerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: employerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned employers
    **/
    _count?: true | EmployerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployerMaxAggregateInputType
  }

  export type GetEmployerAggregateType<T extends EmployerAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployer[P]>
      : GetScalarType<T[P], AggregateEmployer[P]>
  }




  export type employerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: employerWhereInput
    orderBy?: employerOrderByWithAggregationInput | employerOrderByWithAggregationInput[]
    by: EmployerScalarFieldEnum[] | EmployerScalarFieldEnum
    having?: employerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployerCountAggregateInputType | true
    _avg?: EmployerAvgAggregateInputType
    _sum?: EmployerSumAggregateInputType
    _min?: EmployerMinAggregateInputType
    _max?: EmployerMaxAggregateInputType
  }

  export type EmployerGroupByOutputType = {
    employer_id: number
    employer_user_id: number
    employer_company_name: string
    employer_website: string | null
    employer_location: string | null
    employer_bio: string | null
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: EmployerCountAggregateOutputType | null
    _avg: EmployerAvgAggregateOutputType | null
    _sum: EmployerSumAggregateOutputType | null
    _min: EmployerMinAggregateOutputType | null
    _max: EmployerMaxAggregateOutputType | null
  }

  type GetEmployerGroupByPayload<T extends employerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployerGroupByOutputType[P]>
            : GetScalarType<T[P], EmployerGroupByOutputType[P]>
        }
      >
    >


  export type employerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    employer_id?: boolean
    employer_user_id?: boolean
    employer_company_name?: boolean
    employer_website?: boolean
    employer_location?: boolean
    employer_bio?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    job?: boolean | employer$jobArgs<ExtArgs>
    _count?: boolean | EmployerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employer"]>

  export type employerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    employer_id?: boolean
    employer_user_id?: boolean
    employer_company_name?: boolean
    employer_website?: boolean
    employer_location?: boolean
    employer_bio?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employer"]>

  export type employerSelectScalar = {
    employer_id?: boolean
    employer_user_id?: boolean
    employer_company_name?: boolean
    employer_website?: boolean
    employer_location?: boolean
    employer_bio?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type employerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    job?: boolean | employer$jobArgs<ExtArgs>
    _count?: boolean | EmployerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type employerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $employerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "employer"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      job: Prisma.$jobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      employer_id: number
      employer_user_id: number
      employer_company_name: string
      employer_website: string | null
      employer_location: string | null
      employer_bio: string | null
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["employer"]>
    composites: {}
  }

  type employerGetPayload<S extends boolean | null | undefined | employerDefaultArgs> = $Result.GetResult<Prisma.$employerPayload, S>

  type employerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<employerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployerCountAggregateInputType | true
    }

  export interface employerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['employer'], meta: { name: 'employer' } }
    /**
     * Find zero or one Employer that matches the filter.
     * @param {employerFindUniqueArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends employerFindUniqueArgs>(args: SelectSubset<T, employerFindUniqueArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {employerFindUniqueOrThrowArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends employerFindUniqueOrThrowArgs>(args: SelectSubset<T, employerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employerFindFirstArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends employerFindFirstArgs>(args?: SelectSubset<T, employerFindFirstArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employerFindFirstOrThrowArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends employerFindFirstOrThrowArgs>(args?: SelectSubset<T, employerFindFirstOrThrowArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employers
     * const employers = await prisma.employer.findMany()
     * 
     * // Get first 10 Employers
     * const employers = await prisma.employer.findMany({ take: 10 })
     * 
     * // Only select the `employer_id`
     * const employerWithEmployer_idOnly = await prisma.employer.findMany({ select: { employer_id: true } })
     * 
     */
    findMany<T extends employerFindManyArgs>(args?: SelectSubset<T, employerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employer.
     * @param {employerCreateArgs} args - Arguments to create a Employer.
     * @example
     * // Create one Employer
     * const Employer = await prisma.employer.create({
     *   data: {
     *     // ... data to create a Employer
     *   }
     * })
     * 
     */
    create<T extends employerCreateArgs>(args: SelectSubset<T, employerCreateArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employers.
     * @param {employerCreateManyArgs} args - Arguments to create many Employers.
     * @example
     * // Create many Employers
     * const employer = await prisma.employer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends employerCreateManyArgs>(args?: SelectSubset<T, employerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employers and returns the data saved in the database.
     * @param {employerCreateManyAndReturnArgs} args - Arguments to create many Employers.
     * @example
     * // Create many Employers
     * const employer = await prisma.employer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employers and only return the `employer_id`
     * const employerWithEmployer_idOnly = await prisma.employer.createManyAndReturn({ 
     *   select: { employer_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends employerCreateManyAndReturnArgs>(args?: SelectSubset<T, employerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Employer.
     * @param {employerDeleteArgs} args - Arguments to delete one Employer.
     * @example
     * // Delete one Employer
     * const Employer = await prisma.employer.delete({
     *   where: {
     *     // ... filter to delete one Employer
     *   }
     * })
     * 
     */
    delete<T extends employerDeleteArgs>(args: SelectSubset<T, employerDeleteArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employer.
     * @param {employerUpdateArgs} args - Arguments to update one Employer.
     * @example
     * // Update one Employer
     * const employer = await prisma.employer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends employerUpdateArgs>(args: SelectSubset<T, employerUpdateArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employers.
     * @param {employerDeleteManyArgs} args - Arguments to filter Employers to delete.
     * @example
     * // Delete a few Employers
     * const { count } = await prisma.employer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends employerDeleteManyArgs>(args?: SelectSubset<T, employerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employers
     * const employer = await prisma.employer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends employerUpdateManyArgs>(args: SelectSubset<T, employerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employer.
     * @param {employerUpsertArgs} args - Arguments to update or create a Employer.
     * @example
     * // Update or create a Employer
     * const employer = await prisma.employer.upsert({
     *   create: {
     *     // ... data to create a Employer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employer we want to update
     *   }
     * })
     */
    upsert<T extends employerUpsertArgs>(args: SelectSubset<T, employerUpsertArgs<ExtArgs>>): Prisma__employerClient<$Result.GetResult<Prisma.$employerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employerCountArgs} args - Arguments to filter Employers to count.
     * @example
     * // Count the number of Employers
     * const count = await prisma.employer.count({
     *   where: {
     *     // ... the filter for the Employers we want to count
     *   }
     * })
    **/
    count<T extends employerCountArgs>(
      args?: Subset<T, employerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployerAggregateArgs>(args: Subset<T, EmployerAggregateArgs>): Prisma.PrismaPromise<GetEmployerAggregateType<T>>

    /**
     * Group by Employer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends employerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: employerGroupByArgs['orderBy'] }
        : { orderBy?: employerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, employerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the employer model
   */
  readonly fields: employerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for employer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__employerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    job<T extends employer$jobArgs<ExtArgs> = {}>(args?: Subset<T, employer$jobArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jobPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the employer model
   */ 
  interface employerFieldRefs {
    readonly employer_id: FieldRef<"employer", 'Int'>
    readonly employer_user_id: FieldRef<"employer", 'Int'>
    readonly employer_company_name: FieldRef<"employer", 'String'>
    readonly employer_website: FieldRef<"employer", 'String'>
    readonly employer_location: FieldRef<"employer", 'String'>
    readonly employer_bio: FieldRef<"employer", 'String'>
    readonly is_active: FieldRef<"employer", 'Boolean'>
    readonly created_at: FieldRef<"employer", 'DateTime'>
    readonly updated_at: FieldRef<"employer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * employer findUnique
   */
  export type employerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * Filter, which employer to fetch.
     */
    where: employerWhereUniqueInput
  }

  /**
   * employer findUniqueOrThrow
   */
  export type employerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * Filter, which employer to fetch.
     */
    where: employerWhereUniqueInput
  }

  /**
   * employer findFirst
   */
  export type employerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * Filter, which employer to fetch.
     */
    where?: employerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employers to fetch.
     */
    orderBy?: employerOrderByWithRelationInput | employerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employers.
     */
    cursor?: employerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employers.
     */
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * employer findFirstOrThrow
   */
  export type employerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * Filter, which employer to fetch.
     */
    where?: employerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employers to fetch.
     */
    orderBy?: employerOrderByWithRelationInput | employerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employers.
     */
    cursor?: employerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employers.
     */
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * employer findMany
   */
  export type employerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * Filter, which employers to fetch.
     */
    where?: employerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employers to fetch.
     */
    orderBy?: employerOrderByWithRelationInput | employerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing employers.
     */
    cursor?: employerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employers.
     */
    skip?: number
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * employer create
   */
  export type employerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * The data needed to create a employer.
     */
    data: XOR<employerCreateInput, employerUncheckedCreateInput>
  }

  /**
   * employer createMany
   */
  export type employerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many employers.
     */
    data: employerCreateManyInput | employerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * employer createManyAndReturn
   */
  export type employerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many employers.
     */
    data: employerCreateManyInput | employerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * employer update
   */
  export type employerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * The data needed to update a employer.
     */
    data: XOR<employerUpdateInput, employerUncheckedUpdateInput>
    /**
     * Choose, which employer to update.
     */
    where: employerWhereUniqueInput
  }

  /**
   * employer updateMany
   */
  export type employerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update employers.
     */
    data: XOR<employerUpdateManyMutationInput, employerUncheckedUpdateManyInput>
    /**
     * Filter which employers to update
     */
    where?: employerWhereInput
  }

  /**
   * employer upsert
   */
  export type employerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * The filter to search for the employer to update in case it exists.
     */
    where: employerWhereUniqueInput
    /**
     * In case the employer found by the `where` argument doesn't exist, create a new employer with this data.
     */
    create: XOR<employerCreateInput, employerUncheckedCreateInput>
    /**
     * In case the employer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<employerUpdateInput, employerUncheckedUpdateInput>
  }

  /**
   * employer delete
   */
  export type employerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
    /**
     * Filter which employer to delete.
     */
    where: employerWhereUniqueInput
  }

  /**
   * employer deleteMany
   */
  export type employerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employers to delete
     */
    where?: employerWhereInput
  }

  /**
   * employer.job
   */
  export type employer$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the job
     */
    select?: jobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jobInclude<ExtArgs> | null
    where?: jobWhereInput
    orderBy?: jobOrderByWithRelationInput | jobOrderByWithRelationInput[]
    cursor?: jobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * employer without action
   */
  export type employerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employer
     */
    select?: employerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    user_email: 'user_email',
    user_password: 'user_password',
    user_role: 'user_role',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const JobScalarFieldEnum: {
    job_id: 'job_id',
    job_title: 'job_title',
    job_description: 'job_description',
    job_location: 'job_location',
    job_category_id: 'job_category_id',
    job_type_id: 'job_type_id',
    job_city: 'job_city',
    job_state: 'job_state',
    job_country: 'job_country',
    job_salary: 'job_salary',
    job_remote: 'job_remote',
    job_tags: 'job_tags',
    job_employer_id: 'job_employer_id',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const Job_categoryScalarFieldEnum: {
    job_category_id: 'job_category_id',
    job_category_name: 'job_category_name',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Job_categoryScalarFieldEnum = (typeof Job_categoryScalarFieldEnum)[keyof typeof Job_categoryScalarFieldEnum]


  export const Job_typeScalarFieldEnum: {
    job_type_id: 'job_type_id',
    job_type_name: 'job_type_name',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Job_typeScalarFieldEnum = (typeof Job_typeScalarFieldEnum)[keyof typeof Job_typeScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    application_id: 'application_id',
    application_job_id: 'application_job_id',
    application_jobseeker_id: 'application_jobseeker_id',
    application_status: 'application_status',
    application_message: 'application_message',
    application_resume_url: 'application_resume_url',
    is_active: 'is_active',
    applied_at: 'applied_at',
    updated_at: 'updated_at'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const JobseekerScalarFieldEnum: {
    jobseeker_id: 'jobseeker_id',
    jobseeker_user_id: 'jobseeker_user_id',
    jobseeker_full_name: 'jobseeker_full_name',
    jobseeker_phone: 'jobseeker_phone',
    jobseeker_resume_url: 'jobseeker_resume_url',
    jobseeker_skills: 'jobseeker_skills',
    jobseeker_experience_years: 'jobseeker_experience_years',
    jobseeker_bio: 'jobseeker_bio',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type JobseekerScalarFieldEnum = (typeof JobseekerScalarFieldEnum)[keyof typeof JobseekerScalarFieldEnum]


  export const EmployerScalarFieldEnum: {
    employer_id: 'employer_id',
    employer_user_id: 'employer_user_id',
    employer_company_name: 'employer_company_name',
    employer_website: 'employer_website',
    employer_location: 'employer_location',
    employer_bio: 'employer_bio',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type EmployerScalarFieldEnum = (typeof EmployerScalarFieldEnum)[keyof typeof EmployerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    user_id?: IntFilter<"user"> | number
    user_email?: StringFilter<"user"> | string
    user_password?: StringFilter<"user"> | string
    user_role?: EnumRoleFilter<"user"> | $Enums.Role
    is_active?: BoolFilter<"user"> | boolean
    created_at?: DateTimeFilter<"user"> | Date | string
    updated_at?: DateTimeFilter<"user"> | Date | string
    jobseeker?: XOR<JobseekerNullableRelationFilter, jobseekerWhereInput> | null
    employer?: XOR<EmployerNullableRelationFilter, employerWhereInput> | null
  }

  export type userOrderByWithRelationInput = {
    user_id?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_role?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    jobseeker?: jobseekerOrderByWithRelationInput
    employer?: employerOrderByWithRelationInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    user_email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    user_password?: StringFilter<"user"> | string
    user_role?: EnumRoleFilter<"user"> | $Enums.Role
    is_active?: BoolFilter<"user"> | boolean
    created_at?: DateTimeFilter<"user"> | Date | string
    updated_at?: DateTimeFilter<"user"> | Date | string
    jobseeker?: XOR<JobseekerNullableRelationFilter, jobseekerWhereInput> | null
    employer?: XOR<EmployerNullableRelationFilter, employerWhereInput> | null
  }, "user_id" | "user_email">

  export type userOrderByWithAggregationInput = {
    user_id?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_role?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"user"> | number
    user_email?: StringWithAggregatesFilter<"user"> | string
    user_password?: StringWithAggregatesFilter<"user"> | string
    user_role?: EnumRoleWithAggregatesFilter<"user"> | $Enums.Role
    is_active?: BoolWithAggregatesFilter<"user"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type jobWhereInput = {
    AND?: jobWhereInput | jobWhereInput[]
    OR?: jobWhereInput[]
    NOT?: jobWhereInput | jobWhereInput[]
    job_id?: IntFilter<"job"> | number
    job_title?: StringFilter<"job"> | string
    job_description?: StringFilter<"job"> | string
    job_location?: StringFilter<"job"> | string
    job_category_id?: IntFilter<"job"> | number
    job_type_id?: IntFilter<"job"> | number
    job_city?: StringNullableFilter<"job"> | string | null
    job_state?: StringNullableFilter<"job"> | string | null
    job_country?: StringNullableFilter<"job"> | string | null
    job_salary?: StringNullableFilter<"job"> | string | null
    job_remote?: BoolNullableFilter<"job"> | boolean | null
    job_tags?: StringNullableListFilter<"job">
    job_employer_id?: IntFilter<"job"> | number
    is_active?: BoolFilter<"job"> | boolean
    created_at?: DateTimeFilter<"job"> | Date | string
    updated_at?: DateTimeFilter<"job"> | Date | string
    employer?: XOR<EmployerRelationFilter, employerWhereInput>
    applications?: ApplicationListRelationFilter
    job_category?: XOR<Job_categoryRelationFilter, job_categoryWhereInput>
    job_type?: XOR<Job_typeRelationFilter, job_typeWhereInput>
  }

  export type jobOrderByWithRelationInput = {
    job_id?: SortOrder
    job_title?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_category_id?: SortOrder
    job_type_id?: SortOrder
    job_city?: SortOrderInput | SortOrder
    job_state?: SortOrderInput | SortOrder
    job_country?: SortOrderInput | SortOrder
    job_salary?: SortOrderInput | SortOrder
    job_remote?: SortOrderInput | SortOrder
    job_tags?: SortOrder
    job_employer_id?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    employer?: employerOrderByWithRelationInput
    applications?: applicationOrderByRelationAggregateInput
    job_category?: job_categoryOrderByWithRelationInput
    job_type?: job_typeOrderByWithRelationInput
  }

  export type jobWhereUniqueInput = Prisma.AtLeast<{
    job_id?: number
    AND?: jobWhereInput | jobWhereInput[]
    OR?: jobWhereInput[]
    NOT?: jobWhereInput | jobWhereInput[]
    job_title?: StringFilter<"job"> | string
    job_description?: StringFilter<"job"> | string
    job_location?: StringFilter<"job"> | string
    job_category_id?: IntFilter<"job"> | number
    job_type_id?: IntFilter<"job"> | number
    job_city?: StringNullableFilter<"job"> | string | null
    job_state?: StringNullableFilter<"job"> | string | null
    job_country?: StringNullableFilter<"job"> | string | null
    job_salary?: StringNullableFilter<"job"> | string | null
    job_remote?: BoolNullableFilter<"job"> | boolean | null
    job_tags?: StringNullableListFilter<"job">
    job_employer_id?: IntFilter<"job"> | number
    is_active?: BoolFilter<"job"> | boolean
    created_at?: DateTimeFilter<"job"> | Date | string
    updated_at?: DateTimeFilter<"job"> | Date | string
    employer?: XOR<EmployerRelationFilter, employerWhereInput>
    applications?: ApplicationListRelationFilter
    job_category?: XOR<Job_categoryRelationFilter, job_categoryWhereInput>
    job_type?: XOR<Job_typeRelationFilter, job_typeWhereInput>
  }, "job_id">

  export type jobOrderByWithAggregationInput = {
    job_id?: SortOrder
    job_title?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_category_id?: SortOrder
    job_type_id?: SortOrder
    job_city?: SortOrderInput | SortOrder
    job_state?: SortOrderInput | SortOrder
    job_country?: SortOrderInput | SortOrder
    job_salary?: SortOrderInput | SortOrder
    job_remote?: SortOrderInput | SortOrder
    job_tags?: SortOrder
    job_employer_id?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: jobCountOrderByAggregateInput
    _avg?: jobAvgOrderByAggregateInput
    _max?: jobMaxOrderByAggregateInput
    _min?: jobMinOrderByAggregateInput
    _sum?: jobSumOrderByAggregateInput
  }

  export type jobScalarWhereWithAggregatesInput = {
    AND?: jobScalarWhereWithAggregatesInput | jobScalarWhereWithAggregatesInput[]
    OR?: jobScalarWhereWithAggregatesInput[]
    NOT?: jobScalarWhereWithAggregatesInput | jobScalarWhereWithAggregatesInput[]
    job_id?: IntWithAggregatesFilter<"job"> | number
    job_title?: StringWithAggregatesFilter<"job"> | string
    job_description?: StringWithAggregatesFilter<"job"> | string
    job_location?: StringWithAggregatesFilter<"job"> | string
    job_category_id?: IntWithAggregatesFilter<"job"> | number
    job_type_id?: IntWithAggregatesFilter<"job"> | number
    job_city?: StringNullableWithAggregatesFilter<"job"> | string | null
    job_state?: StringNullableWithAggregatesFilter<"job"> | string | null
    job_country?: StringNullableWithAggregatesFilter<"job"> | string | null
    job_salary?: StringNullableWithAggregatesFilter<"job"> | string | null
    job_remote?: BoolNullableWithAggregatesFilter<"job"> | boolean | null
    job_tags?: StringNullableListFilter<"job">
    job_employer_id?: IntWithAggregatesFilter<"job"> | number
    is_active?: BoolWithAggregatesFilter<"job"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"job"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"job"> | Date | string
  }

  export type job_categoryWhereInput = {
    AND?: job_categoryWhereInput | job_categoryWhereInput[]
    OR?: job_categoryWhereInput[]
    NOT?: job_categoryWhereInput | job_categoryWhereInput[]
    job_category_id?: IntFilter<"job_category"> | number
    job_category_name?: StringFilter<"job_category"> | string
    is_active?: BoolFilter<"job_category"> | boolean
    created_at?: DateTimeFilter<"job_category"> | Date | string
    updated_at?: DateTimeFilter<"job_category"> | Date | string
    job?: JobListRelationFilter
  }

  export type job_categoryOrderByWithRelationInput = {
    job_category_id?: SortOrder
    job_category_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    job?: jobOrderByRelationAggregateInput
  }

  export type job_categoryWhereUniqueInput = Prisma.AtLeast<{
    job_category_id?: number
    AND?: job_categoryWhereInput | job_categoryWhereInput[]
    OR?: job_categoryWhereInput[]
    NOT?: job_categoryWhereInput | job_categoryWhereInput[]
    job_category_name?: StringFilter<"job_category"> | string
    is_active?: BoolFilter<"job_category"> | boolean
    created_at?: DateTimeFilter<"job_category"> | Date | string
    updated_at?: DateTimeFilter<"job_category"> | Date | string
    job?: JobListRelationFilter
  }, "job_category_id">

  export type job_categoryOrderByWithAggregationInput = {
    job_category_id?: SortOrder
    job_category_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: job_categoryCountOrderByAggregateInput
    _avg?: job_categoryAvgOrderByAggregateInput
    _max?: job_categoryMaxOrderByAggregateInput
    _min?: job_categoryMinOrderByAggregateInput
    _sum?: job_categorySumOrderByAggregateInput
  }

  export type job_categoryScalarWhereWithAggregatesInput = {
    AND?: job_categoryScalarWhereWithAggregatesInput | job_categoryScalarWhereWithAggregatesInput[]
    OR?: job_categoryScalarWhereWithAggregatesInput[]
    NOT?: job_categoryScalarWhereWithAggregatesInput | job_categoryScalarWhereWithAggregatesInput[]
    job_category_id?: IntWithAggregatesFilter<"job_category"> | number
    job_category_name?: StringWithAggregatesFilter<"job_category"> | string
    is_active?: BoolWithAggregatesFilter<"job_category"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"job_category"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"job_category"> | Date | string
  }

  export type job_typeWhereInput = {
    AND?: job_typeWhereInput | job_typeWhereInput[]
    OR?: job_typeWhereInput[]
    NOT?: job_typeWhereInput | job_typeWhereInput[]
    job_type_id?: IntFilter<"job_type"> | number
    job_type_name?: StringFilter<"job_type"> | string
    is_active?: BoolFilter<"job_type"> | boolean
    created_at?: DateTimeFilter<"job_type"> | Date | string
    updated_at?: DateTimeFilter<"job_type"> | Date | string
    job?: JobListRelationFilter
  }

  export type job_typeOrderByWithRelationInput = {
    job_type_id?: SortOrder
    job_type_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    job?: jobOrderByRelationAggregateInput
  }

  export type job_typeWhereUniqueInput = Prisma.AtLeast<{
    job_type_id?: number
    AND?: job_typeWhereInput | job_typeWhereInput[]
    OR?: job_typeWhereInput[]
    NOT?: job_typeWhereInput | job_typeWhereInput[]
    job_type_name?: StringFilter<"job_type"> | string
    is_active?: BoolFilter<"job_type"> | boolean
    created_at?: DateTimeFilter<"job_type"> | Date | string
    updated_at?: DateTimeFilter<"job_type"> | Date | string
    job?: JobListRelationFilter
  }, "job_type_id">

  export type job_typeOrderByWithAggregationInput = {
    job_type_id?: SortOrder
    job_type_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: job_typeCountOrderByAggregateInput
    _avg?: job_typeAvgOrderByAggregateInput
    _max?: job_typeMaxOrderByAggregateInput
    _min?: job_typeMinOrderByAggregateInput
    _sum?: job_typeSumOrderByAggregateInput
  }

  export type job_typeScalarWhereWithAggregatesInput = {
    AND?: job_typeScalarWhereWithAggregatesInput | job_typeScalarWhereWithAggregatesInput[]
    OR?: job_typeScalarWhereWithAggregatesInput[]
    NOT?: job_typeScalarWhereWithAggregatesInput | job_typeScalarWhereWithAggregatesInput[]
    job_type_id?: IntWithAggregatesFilter<"job_type"> | number
    job_type_name?: StringWithAggregatesFilter<"job_type"> | string
    is_active?: BoolWithAggregatesFilter<"job_type"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"job_type"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"job_type"> | Date | string
  }

  export type applicationWhereInput = {
    AND?: applicationWhereInput | applicationWhereInput[]
    OR?: applicationWhereInput[]
    NOT?: applicationWhereInput | applicationWhereInput[]
    application_id?: IntFilter<"application"> | number
    application_job_id?: IntFilter<"application"> | number
    application_jobseeker_id?: IntFilter<"application"> | number
    application_status?: StringFilter<"application"> | string
    application_message?: StringNullableFilter<"application"> | string | null
    application_resume_url?: StringNullableFilter<"application"> | string | null
    is_active?: BoolFilter<"application"> | boolean
    applied_at?: DateTimeFilter<"application"> | Date | string
    updated_at?: DateTimeFilter<"application"> | Date | string
    job?: XOR<JobRelationFilter, jobWhereInput>
    jobseeker?: XOR<JobseekerRelationFilter, jobseekerWhereInput>
  }

  export type applicationOrderByWithRelationInput = {
    application_id?: SortOrder
    application_job_id?: SortOrder
    application_jobseeker_id?: SortOrder
    application_status?: SortOrder
    application_message?: SortOrderInput | SortOrder
    application_resume_url?: SortOrderInput | SortOrder
    is_active?: SortOrder
    applied_at?: SortOrder
    updated_at?: SortOrder
    job?: jobOrderByWithRelationInput
    jobseeker?: jobseekerOrderByWithRelationInput
  }

  export type applicationWhereUniqueInput = Prisma.AtLeast<{
    application_id?: number
    AND?: applicationWhereInput | applicationWhereInput[]
    OR?: applicationWhereInput[]
    NOT?: applicationWhereInput | applicationWhereInput[]
    application_job_id?: IntFilter<"application"> | number
    application_jobseeker_id?: IntFilter<"application"> | number
    application_status?: StringFilter<"application"> | string
    application_message?: StringNullableFilter<"application"> | string | null
    application_resume_url?: StringNullableFilter<"application"> | string | null
    is_active?: BoolFilter<"application"> | boolean
    applied_at?: DateTimeFilter<"application"> | Date | string
    updated_at?: DateTimeFilter<"application"> | Date | string
    job?: XOR<JobRelationFilter, jobWhereInput>
    jobseeker?: XOR<JobseekerRelationFilter, jobseekerWhereInput>
  }, "application_id">

  export type applicationOrderByWithAggregationInput = {
    application_id?: SortOrder
    application_job_id?: SortOrder
    application_jobseeker_id?: SortOrder
    application_status?: SortOrder
    application_message?: SortOrderInput | SortOrder
    application_resume_url?: SortOrderInput | SortOrder
    is_active?: SortOrder
    applied_at?: SortOrder
    updated_at?: SortOrder
    _count?: applicationCountOrderByAggregateInput
    _avg?: applicationAvgOrderByAggregateInput
    _max?: applicationMaxOrderByAggregateInput
    _min?: applicationMinOrderByAggregateInput
    _sum?: applicationSumOrderByAggregateInput
  }

  export type applicationScalarWhereWithAggregatesInput = {
    AND?: applicationScalarWhereWithAggregatesInput | applicationScalarWhereWithAggregatesInput[]
    OR?: applicationScalarWhereWithAggregatesInput[]
    NOT?: applicationScalarWhereWithAggregatesInput | applicationScalarWhereWithAggregatesInput[]
    application_id?: IntWithAggregatesFilter<"application"> | number
    application_job_id?: IntWithAggregatesFilter<"application"> | number
    application_jobseeker_id?: IntWithAggregatesFilter<"application"> | number
    application_status?: StringWithAggregatesFilter<"application"> | string
    application_message?: StringNullableWithAggregatesFilter<"application"> | string | null
    application_resume_url?: StringNullableWithAggregatesFilter<"application"> | string | null
    is_active?: BoolWithAggregatesFilter<"application"> | boolean
    applied_at?: DateTimeWithAggregatesFilter<"application"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"application"> | Date | string
  }

  export type jobseekerWhereInput = {
    AND?: jobseekerWhereInput | jobseekerWhereInput[]
    OR?: jobseekerWhereInput[]
    NOT?: jobseekerWhereInput | jobseekerWhereInput[]
    jobseeker_id?: IntFilter<"jobseeker"> | number
    jobseeker_user_id?: IntFilter<"jobseeker"> | number
    jobseeker_full_name?: StringFilter<"jobseeker"> | string
    jobseeker_phone?: StringNullableFilter<"jobseeker"> | string | null
    jobseeker_resume_url?: StringNullableFilter<"jobseeker"> | string | null
    jobseeker_skills?: StringNullableListFilter<"jobseeker">
    jobseeker_experience_years?: IntNullableFilter<"jobseeker"> | number | null
    jobseeker_bio?: StringNullableFilter<"jobseeker"> | string | null
    is_active?: BoolFilter<"jobseeker"> | boolean
    created_at?: DateTimeFilter<"jobseeker"> | Date | string
    updated_at?: DateTimeFilter<"jobseeker"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    application?: ApplicationListRelationFilter
  }

  export type jobseekerOrderByWithRelationInput = {
    jobseeker_id?: SortOrder
    jobseeker_user_id?: SortOrder
    jobseeker_full_name?: SortOrder
    jobseeker_phone?: SortOrderInput | SortOrder
    jobseeker_resume_url?: SortOrderInput | SortOrder
    jobseeker_skills?: SortOrder
    jobseeker_experience_years?: SortOrderInput | SortOrder
    jobseeker_bio?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: userOrderByWithRelationInput
    application?: applicationOrderByRelationAggregateInput
  }

  export type jobseekerWhereUniqueInput = Prisma.AtLeast<{
    jobseeker_id?: number
    jobseeker_user_id?: number
    AND?: jobseekerWhereInput | jobseekerWhereInput[]
    OR?: jobseekerWhereInput[]
    NOT?: jobseekerWhereInput | jobseekerWhereInput[]
    jobseeker_full_name?: StringFilter<"jobseeker"> | string
    jobseeker_phone?: StringNullableFilter<"jobseeker"> | string | null
    jobseeker_resume_url?: StringNullableFilter<"jobseeker"> | string | null
    jobseeker_skills?: StringNullableListFilter<"jobseeker">
    jobseeker_experience_years?: IntNullableFilter<"jobseeker"> | number | null
    jobseeker_bio?: StringNullableFilter<"jobseeker"> | string | null
    is_active?: BoolFilter<"jobseeker"> | boolean
    created_at?: DateTimeFilter<"jobseeker"> | Date | string
    updated_at?: DateTimeFilter<"jobseeker"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    application?: ApplicationListRelationFilter
  }, "jobseeker_id" | "jobseeker_user_id">

  export type jobseekerOrderByWithAggregationInput = {
    jobseeker_id?: SortOrder
    jobseeker_user_id?: SortOrder
    jobseeker_full_name?: SortOrder
    jobseeker_phone?: SortOrderInput | SortOrder
    jobseeker_resume_url?: SortOrderInput | SortOrder
    jobseeker_skills?: SortOrder
    jobseeker_experience_years?: SortOrderInput | SortOrder
    jobseeker_bio?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: jobseekerCountOrderByAggregateInput
    _avg?: jobseekerAvgOrderByAggregateInput
    _max?: jobseekerMaxOrderByAggregateInput
    _min?: jobseekerMinOrderByAggregateInput
    _sum?: jobseekerSumOrderByAggregateInput
  }

  export type jobseekerScalarWhereWithAggregatesInput = {
    AND?: jobseekerScalarWhereWithAggregatesInput | jobseekerScalarWhereWithAggregatesInput[]
    OR?: jobseekerScalarWhereWithAggregatesInput[]
    NOT?: jobseekerScalarWhereWithAggregatesInput | jobseekerScalarWhereWithAggregatesInput[]
    jobseeker_id?: IntWithAggregatesFilter<"jobseeker"> | number
    jobseeker_user_id?: IntWithAggregatesFilter<"jobseeker"> | number
    jobseeker_full_name?: StringWithAggregatesFilter<"jobseeker"> | string
    jobseeker_phone?: StringNullableWithAggregatesFilter<"jobseeker"> | string | null
    jobseeker_resume_url?: StringNullableWithAggregatesFilter<"jobseeker"> | string | null
    jobseeker_skills?: StringNullableListFilter<"jobseeker">
    jobseeker_experience_years?: IntNullableWithAggregatesFilter<"jobseeker"> | number | null
    jobseeker_bio?: StringNullableWithAggregatesFilter<"jobseeker"> | string | null
    is_active?: BoolWithAggregatesFilter<"jobseeker"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"jobseeker"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"jobseeker"> | Date | string
  }

  export type employerWhereInput = {
    AND?: employerWhereInput | employerWhereInput[]
    OR?: employerWhereInput[]
    NOT?: employerWhereInput | employerWhereInput[]
    employer_id?: IntFilter<"employer"> | number
    employer_user_id?: IntFilter<"employer"> | number
    employer_company_name?: StringFilter<"employer"> | string
    employer_website?: StringNullableFilter<"employer"> | string | null
    employer_location?: StringNullableFilter<"employer"> | string | null
    employer_bio?: StringNullableFilter<"employer"> | string | null
    is_active?: BoolFilter<"employer"> | boolean
    created_at?: DateTimeFilter<"employer"> | Date | string
    updated_at?: DateTimeFilter<"employer"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    job?: JobListRelationFilter
  }

  export type employerOrderByWithRelationInput = {
    employer_id?: SortOrder
    employer_user_id?: SortOrder
    employer_company_name?: SortOrder
    employer_website?: SortOrderInput | SortOrder
    employer_location?: SortOrderInput | SortOrder
    employer_bio?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: userOrderByWithRelationInput
    job?: jobOrderByRelationAggregateInput
  }

  export type employerWhereUniqueInput = Prisma.AtLeast<{
    employer_id?: number
    employer_user_id?: number
    AND?: employerWhereInput | employerWhereInput[]
    OR?: employerWhereInput[]
    NOT?: employerWhereInput | employerWhereInput[]
    employer_company_name?: StringFilter<"employer"> | string
    employer_website?: StringNullableFilter<"employer"> | string | null
    employer_location?: StringNullableFilter<"employer"> | string | null
    employer_bio?: StringNullableFilter<"employer"> | string | null
    is_active?: BoolFilter<"employer"> | boolean
    created_at?: DateTimeFilter<"employer"> | Date | string
    updated_at?: DateTimeFilter<"employer"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    job?: JobListRelationFilter
  }, "employer_id" | "employer_user_id">

  export type employerOrderByWithAggregationInput = {
    employer_id?: SortOrder
    employer_user_id?: SortOrder
    employer_company_name?: SortOrder
    employer_website?: SortOrderInput | SortOrder
    employer_location?: SortOrderInput | SortOrder
    employer_bio?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: employerCountOrderByAggregateInput
    _avg?: employerAvgOrderByAggregateInput
    _max?: employerMaxOrderByAggregateInput
    _min?: employerMinOrderByAggregateInput
    _sum?: employerSumOrderByAggregateInput
  }

  export type employerScalarWhereWithAggregatesInput = {
    AND?: employerScalarWhereWithAggregatesInput | employerScalarWhereWithAggregatesInput[]
    OR?: employerScalarWhereWithAggregatesInput[]
    NOT?: employerScalarWhereWithAggregatesInput | employerScalarWhereWithAggregatesInput[]
    employer_id?: IntWithAggregatesFilter<"employer"> | number
    employer_user_id?: IntWithAggregatesFilter<"employer"> | number
    employer_company_name?: StringWithAggregatesFilter<"employer"> | string
    employer_website?: StringNullableWithAggregatesFilter<"employer"> | string | null
    employer_location?: StringNullableWithAggregatesFilter<"employer"> | string | null
    employer_bio?: StringNullableWithAggregatesFilter<"employer"> | string | null
    is_active?: BoolWithAggregatesFilter<"employer"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"employer"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"employer"> | Date | string
  }

  export type userCreateInput = {
    user_email: string
    user_password: string
    user_role?: $Enums.Role
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    jobseeker?: jobseekerCreateNestedOneWithoutUserInput
    employer?: employerCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    user_id?: number
    user_email: string
    user_password: string
    user_role?: $Enums.Role
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    jobseeker?: jobseekerUncheckedCreateNestedOneWithoutUserInput
    employer?: employerUncheckedCreateNestedOneWithoutUserInput
  }

  export type userUpdateInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    jobseeker?: jobseekerUpdateOneWithoutUserNestedInput
    employer?: employerUpdateOneWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    jobseeker?: jobseekerUncheckedUpdateOneWithoutUserNestedInput
    employer?: employerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    user_id?: number
    user_email: string
    user_password: string
    user_role?: $Enums.Role
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type userUpdateManyMutationInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobCreateInput = {
    job_title: string
    job_description: string
    job_location: string
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employer: employerCreateNestedOneWithoutJobInput
    applications?: applicationCreateNestedManyWithoutJobInput
    job_category: job_categoryCreateNestedOneWithoutJobInput
    job_type: job_typeCreateNestedOneWithoutJobInput
  }

  export type jobUncheckedCreateInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_type_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    job_employer_id: number
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    applications?: applicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type jobUpdateInput = {
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: employerUpdateOneRequiredWithoutJobNestedInput
    applications?: applicationUpdateManyWithoutJobNestedInput
    job_category?: job_categoryUpdateOneRequiredWithoutJobNestedInput
    job_type?: job_typeUpdateOneRequiredWithoutJobNestedInput
  }

  export type jobUncheckedUpdateInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    job_employer_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: applicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type jobCreateManyInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_type_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    job_employer_id: number
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type jobUpdateManyMutationInput = {
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobUncheckedUpdateManyInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    job_employer_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type job_categoryCreateInput = {
    job_category_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    job?: jobCreateNestedManyWithoutJob_categoryInput
  }

  export type job_categoryUncheckedCreateInput = {
    job_category_id?: number
    job_category_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    job?: jobUncheckedCreateNestedManyWithoutJob_categoryInput
  }

  export type job_categoryUpdateInput = {
    job_category_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUpdateManyWithoutJob_categoryNestedInput
  }

  export type job_categoryUncheckedUpdateInput = {
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_category_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUncheckedUpdateManyWithoutJob_categoryNestedInput
  }

  export type job_categoryCreateManyInput = {
    job_category_id?: number
    job_category_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type job_categoryUpdateManyMutationInput = {
    job_category_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type job_categoryUncheckedUpdateManyInput = {
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_category_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type job_typeCreateInput = {
    job_type_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    job?: jobCreateNestedManyWithoutJob_typeInput
  }

  export type job_typeUncheckedCreateInput = {
    job_type_id?: number
    job_type_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    job?: jobUncheckedCreateNestedManyWithoutJob_typeInput
  }

  export type job_typeUpdateInput = {
    job_type_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUpdateManyWithoutJob_typeNestedInput
  }

  export type job_typeUncheckedUpdateInput = {
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_type_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUncheckedUpdateManyWithoutJob_typeNestedInput
  }

  export type job_typeCreateManyInput = {
    job_type_id?: number
    job_type_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type job_typeUpdateManyMutationInput = {
    job_type_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type job_typeUncheckedUpdateManyInput = {
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_type_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicationCreateInput = {
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
    job: jobCreateNestedOneWithoutApplicationsInput
    jobseeker: jobseekerCreateNestedOneWithoutApplicationInput
  }

  export type applicationUncheckedCreateInput = {
    application_id?: number
    application_job_id: number
    application_jobseeker_id: number
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
  }

  export type applicationUpdateInput = {
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUpdateOneRequiredWithoutApplicationsNestedInput
    jobseeker?: jobseekerUpdateOneRequiredWithoutApplicationNestedInput
  }

  export type applicationUncheckedUpdateInput = {
    application_id?: IntFieldUpdateOperationsInput | number
    application_job_id?: IntFieldUpdateOperationsInput | number
    application_jobseeker_id?: IntFieldUpdateOperationsInput | number
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicationCreateManyInput = {
    application_id?: number
    application_job_id: number
    application_jobseeker_id: number
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
  }

  export type applicationUpdateManyMutationInput = {
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicationUncheckedUpdateManyInput = {
    application_id?: IntFieldUpdateOperationsInput | number
    application_job_id?: IntFieldUpdateOperationsInput | number
    application_jobseeker_id?: IntFieldUpdateOperationsInput | number
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobseekerCreateInput = {
    jobseeker_full_name: string
    jobseeker_phone?: string | null
    jobseeker_resume_url?: string | null
    jobseeker_skills?: jobseekerCreatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: number | null
    jobseeker_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    user: userCreateNestedOneWithoutJobseekerInput
    application?: applicationCreateNestedManyWithoutJobseekerInput
  }

  export type jobseekerUncheckedCreateInput = {
    jobseeker_id?: number
    jobseeker_user_id: number
    jobseeker_full_name: string
    jobseeker_phone?: string | null
    jobseeker_resume_url?: string | null
    jobseeker_skills?: jobseekerCreatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: number | null
    jobseeker_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    application?: applicationUncheckedCreateNestedManyWithoutJobseekerInput
  }

  export type jobseekerUpdateInput = {
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutJobseekerNestedInput
    application?: applicationUpdateManyWithoutJobseekerNestedInput
  }

  export type jobseekerUncheckedUpdateInput = {
    jobseeker_id?: IntFieldUpdateOperationsInput | number
    jobseeker_user_id?: IntFieldUpdateOperationsInput | number
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: applicationUncheckedUpdateManyWithoutJobseekerNestedInput
  }

  export type jobseekerCreateManyInput = {
    jobseeker_id?: number
    jobseeker_user_id: number
    jobseeker_full_name: string
    jobseeker_phone?: string | null
    jobseeker_resume_url?: string | null
    jobseeker_skills?: jobseekerCreatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: number | null
    jobseeker_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type jobseekerUpdateManyMutationInput = {
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobseekerUncheckedUpdateManyInput = {
    jobseeker_id?: IntFieldUpdateOperationsInput | number
    jobseeker_user_id?: IntFieldUpdateOperationsInput | number
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type employerCreateInput = {
    employer_company_name: string
    employer_website?: string | null
    employer_location?: string | null
    employer_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    user: userCreateNestedOneWithoutEmployerInput
    job?: jobCreateNestedManyWithoutEmployerInput
  }

  export type employerUncheckedCreateInput = {
    employer_id?: number
    employer_user_id: number
    employer_company_name: string
    employer_website?: string | null
    employer_location?: string | null
    employer_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    job?: jobUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type employerUpdateInput = {
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutEmployerNestedInput
    job?: jobUpdateManyWithoutEmployerNestedInput
  }

  export type employerUncheckedUpdateInput = {
    employer_id?: IntFieldUpdateOperationsInput | number
    employer_user_id?: IntFieldUpdateOperationsInput | number
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type employerCreateManyInput = {
    employer_id?: number
    employer_user_id: number
    employer_company_name: string
    employer_website?: string | null
    employer_location?: string | null
    employer_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type employerUpdateManyMutationInput = {
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type employerUncheckedUpdateManyInput = {
    employer_id?: IntFieldUpdateOperationsInput | number
    employer_user_id?: IntFieldUpdateOperationsInput | number
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type JobseekerNullableRelationFilter = {
    is?: jobseekerWhereInput | null
    isNot?: jobseekerWhereInput | null
  }

  export type EmployerNullableRelationFilter = {
    is?: employerWhereInput | null
    isNot?: employerWhereInput | null
  }

  export type userCountOrderByAggregateInput = {
    user_id?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_role?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    user_id?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_role?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    user_id?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_role?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EmployerRelationFilter = {
    is?: employerWhereInput
    isNot?: employerWhereInput
  }

  export type ApplicationListRelationFilter = {
    every?: applicationWhereInput
    some?: applicationWhereInput
    none?: applicationWhereInput
  }

  export type Job_categoryRelationFilter = {
    is?: job_categoryWhereInput
    isNot?: job_categoryWhereInput
  }

  export type Job_typeRelationFilter = {
    is?: job_typeWhereInput
    isNot?: job_typeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type applicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type jobCountOrderByAggregateInput = {
    job_id?: SortOrder
    job_title?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_category_id?: SortOrder
    job_type_id?: SortOrder
    job_city?: SortOrder
    job_state?: SortOrder
    job_country?: SortOrder
    job_salary?: SortOrder
    job_remote?: SortOrder
    job_tags?: SortOrder
    job_employer_id?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type jobAvgOrderByAggregateInput = {
    job_id?: SortOrder
    job_category_id?: SortOrder
    job_type_id?: SortOrder
    job_employer_id?: SortOrder
  }

  export type jobMaxOrderByAggregateInput = {
    job_id?: SortOrder
    job_title?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_category_id?: SortOrder
    job_type_id?: SortOrder
    job_city?: SortOrder
    job_state?: SortOrder
    job_country?: SortOrder
    job_salary?: SortOrder
    job_remote?: SortOrder
    job_employer_id?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type jobMinOrderByAggregateInput = {
    job_id?: SortOrder
    job_title?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_category_id?: SortOrder
    job_type_id?: SortOrder
    job_city?: SortOrder
    job_state?: SortOrder
    job_country?: SortOrder
    job_salary?: SortOrder
    job_remote?: SortOrder
    job_employer_id?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type jobSumOrderByAggregateInput = {
    job_id?: SortOrder
    job_category_id?: SortOrder
    job_type_id?: SortOrder
    job_employer_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type JobListRelationFilter = {
    every?: jobWhereInput
    some?: jobWhereInput
    none?: jobWhereInput
  }

  export type jobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type job_categoryCountOrderByAggregateInput = {
    job_category_id?: SortOrder
    job_category_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type job_categoryAvgOrderByAggregateInput = {
    job_category_id?: SortOrder
  }

  export type job_categoryMaxOrderByAggregateInput = {
    job_category_id?: SortOrder
    job_category_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type job_categoryMinOrderByAggregateInput = {
    job_category_id?: SortOrder
    job_category_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type job_categorySumOrderByAggregateInput = {
    job_category_id?: SortOrder
  }

  export type job_typeCountOrderByAggregateInput = {
    job_type_id?: SortOrder
    job_type_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type job_typeAvgOrderByAggregateInput = {
    job_type_id?: SortOrder
  }

  export type job_typeMaxOrderByAggregateInput = {
    job_type_id?: SortOrder
    job_type_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type job_typeMinOrderByAggregateInput = {
    job_type_id?: SortOrder
    job_type_name?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type job_typeSumOrderByAggregateInput = {
    job_type_id?: SortOrder
  }

  export type JobRelationFilter = {
    is?: jobWhereInput
    isNot?: jobWhereInput
  }

  export type JobseekerRelationFilter = {
    is?: jobseekerWhereInput
    isNot?: jobseekerWhereInput
  }

  export type applicationCountOrderByAggregateInput = {
    application_id?: SortOrder
    application_job_id?: SortOrder
    application_jobseeker_id?: SortOrder
    application_status?: SortOrder
    application_message?: SortOrder
    application_resume_url?: SortOrder
    is_active?: SortOrder
    applied_at?: SortOrder
    updated_at?: SortOrder
  }

  export type applicationAvgOrderByAggregateInput = {
    application_id?: SortOrder
    application_job_id?: SortOrder
    application_jobseeker_id?: SortOrder
  }

  export type applicationMaxOrderByAggregateInput = {
    application_id?: SortOrder
    application_job_id?: SortOrder
    application_jobseeker_id?: SortOrder
    application_status?: SortOrder
    application_message?: SortOrder
    application_resume_url?: SortOrder
    is_active?: SortOrder
    applied_at?: SortOrder
    updated_at?: SortOrder
  }

  export type applicationMinOrderByAggregateInput = {
    application_id?: SortOrder
    application_job_id?: SortOrder
    application_jobseeker_id?: SortOrder
    application_status?: SortOrder
    application_message?: SortOrder
    application_resume_url?: SortOrder
    is_active?: SortOrder
    applied_at?: SortOrder
    updated_at?: SortOrder
  }

  export type applicationSumOrderByAggregateInput = {
    application_id?: SortOrder
    application_job_id?: SortOrder
    application_jobseeker_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type jobseekerCountOrderByAggregateInput = {
    jobseeker_id?: SortOrder
    jobseeker_user_id?: SortOrder
    jobseeker_full_name?: SortOrder
    jobseeker_phone?: SortOrder
    jobseeker_resume_url?: SortOrder
    jobseeker_skills?: SortOrder
    jobseeker_experience_years?: SortOrder
    jobseeker_bio?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type jobseekerAvgOrderByAggregateInput = {
    jobseeker_id?: SortOrder
    jobseeker_user_id?: SortOrder
    jobseeker_experience_years?: SortOrder
  }

  export type jobseekerMaxOrderByAggregateInput = {
    jobseeker_id?: SortOrder
    jobseeker_user_id?: SortOrder
    jobseeker_full_name?: SortOrder
    jobseeker_phone?: SortOrder
    jobseeker_resume_url?: SortOrder
    jobseeker_experience_years?: SortOrder
    jobseeker_bio?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type jobseekerMinOrderByAggregateInput = {
    jobseeker_id?: SortOrder
    jobseeker_user_id?: SortOrder
    jobseeker_full_name?: SortOrder
    jobseeker_phone?: SortOrder
    jobseeker_resume_url?: SortOrder
    jobseeker_experience_years?: SortOrder
    jobseeker_bio?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type jobseekerSumOrderByAggregateInput = {
    jobseeker_id?: SortOrder
    jobseeker_user_id?: SortOrder
    jobseeker_experience_years?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type employerCountOrderByAggregateInput = {
    employer_id?: SortOrder
    employer_user_id?: SortOrder
    employer_company_name?: SortOrder
    employer_website?: SortOrder
    employer_location?: SortOrder
    employer_bio?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type employerAvgOrderByAggregateInput = {
    employer_id?: SortOrder
    employer_user_id?: SortOrder
  }

  export type employerMaxOrderByAggregateInput = {
    employer_id?: SortOrder
    employer_user_id?: SortOrder
    employer_company_name?: SortOrder
    employer_website?: SortOrder
    employer_location?: SortOrder
    employer_bio?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type employerMinOrderByAggregateInput = {
    employer_id?: SortOrder
    employer_user_id?: SortOrder
    employer_company_name?: SortOrder
    employer_website?: SortOrder
    employer_location?: SortOrder
    employer_bio?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type employerSumOrderByAggregateInput = {
    employer_id?: SortOrder
    employer_user_id?: SortOrder
  }

  export type jobseekerCreateNestedOneWithoutUserInput = {
    create?: XOR<jobseekerCreateWithoutUserInput, jobseekerUncheckedCreateWithoutUserInput>
    connectOrCreate?: jobseekerCreateOrConnectWithoutUserInput
    connect?: jobseekerWhereUniqueInput
  }

  export type employerCreateNestedOneWithoutUserInput = {
    create?: XOR<employerCreateWithoutUserInput, employerUncheckedCreateWithoutUserInput>
    connectOrCreate?: employerCreateOrConnectWithoutUserInput
    connect?: employerWhereUniqueInput
  }

  export type jobseekerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<jobseekerCreateWithoutUserInput, jobseekerUncheckedCreateWithoutUserInput>
    connectOrCreate?: jobseekerCreateOrConnectWithoutUserInput
    connect?: jobseekerWhereUniqueInput
  }

  export type employerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<employerCreateWithoutUserInput, employerUncheckedCreateWithoutUserInput>
    connectOrCreate?: employerCreateOrConnectWithoutUserInput
    connect?: employerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type jobseekerUpdateOneWithoutUserNestedInput = {
    create?: XOR<jobseekerCreateWithoutUserInput, jobseekerUncheckedCreateWithoutUserInput>
    connectOrCreate?: jobseekerCreateOrConnectWithoutUserInput
    upsert?: jobseekerUpsertWithoutUserInput
    disconnect?: jobseekerWhereInput | boolean
    delete?: jobseekerWhereInput | boolean
    connect?: jobseekerWhereUniqueInput
    update?: XOR<XOR<jobseekerUpdateToOneWithWhereWithoutUserInput, jobseekerUpdateWithoutUserInput>, jobseekerUncheckedUpdateWithoutUserInput>
  }

  export type employerUpdateOneWithoutUserNestedInput = {
    create?: XOR<employerCreateWithoutUserInput, employerUncheckedCreateWithoutUserInput>
    connectOrCreate?: employerCreateOrConnectWithoutUserInput
    upsert?: employerUpsertWithoutUserInput
    disconnect?: employerWhereInput | boolean
    delete?: employerWhereInput | boolean
    connect?: employerWhereUniqueInput
    update?: XOR<XOR<employerUpdateToOneWithWhereWithoutUserInput, employerUpdateWithoutUserInput>, employerUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type jobseekerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<jobseekerCreateWithoutUserInput, jobseekerUncheckedCreateWithoutUserInput>
    connectOrCreate?: jobseekerCreateOrConnectWithoutUserInput
    upsert?: jobseekerUpsertWithoutUserInput
    disconnect?: jobseekerWhereInput | boolean
    delete?: jobseekerWhereInput | boolean
    connect?: jobseekerWhereUniqueInput
    update?: XOR<XOR<jobseekerUpdateToOneWithWhereWithoutUserInput, jobseekerUpdateWithoutUserInput>, jobseekerUncheckedUpdateWithoutUserInput>
  }

  export type employerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<employerCreateWithoutUserInput, employerUncheckedCreateWithoutUserInput>
    connectOrCreate?: employerCreateOrConnectWithoutUserInput
    upsert?: employerUpsertWithoutUserInput
    disconnect?: employerWhereInput | boolean
    delete?: employerWhereInput | boolean
    connect?: employerWhereUniqueInput
    update?: XOR<XOR<employerUpdateToOneWithWhereWithoutUserInput, employerUpdateWithoutUserInput>, employerUncheckedUpdateWithoutUserInput>
  }

  export type jobCreatejob_tagsInput = {
    set: string[]
  }

  export type employerCreateNestedOneWithoutJobInput = {
    create?: XOR<employerCreateWithoutJobInput, employerUncheckedCreateWithoutJobInput>
    connectOrCreate?: employerCreateOrConnectWithoutJobInput
    connect?: employerWhereUniqueInput
  }

  export type applicationCreateNestedManyWithoutJobInput = {
    create?: XOR<applicationCreateWithoutJobInput, applicationUncheckedCreateWithoutJobInput> | applicationCreateWithoutJobInput[] | applicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobInput | applicationCreateOrConnectWithoutJobInput[]
    createMany?: applicationCreateManyJobInputEnvelope
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
  }

  export type job_categoryCreateNestedOneWithoutJobInput = {
    create?: XOR<job_categoryCreateWithoutJobInput, job_categoryUncheckedCreateWithoutJobInput>
    connectOrCreate?: job_categoryCreateOrConnectWithoutJobInput
    connect?: job_categoryWhereUniqueInput
  }

  export type job_typeCreateNestedOneWithoutJobInput = {
    create?: XOR<job_typeCreateWithoutJobInput, job_typeUncheckedCreateWithoutJobInput>
    connectOrCreate?: job_typeCreateOrConnectWithoutJobInput
    connect?: job_typeWhereUniqueInput
  }

  export type applicationUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<applicationCreateWithoutJobInput, applicationUncheckedCreateWithoutJobInput> | applicationCreateWithoutJobInput[] | applicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobInput | applicationCreateOrConnectWithoutJobInput[]
    createMany?: applicationCreateManyJobInputEnvelope
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type jobUpdatejob_tagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type employerUpdateOneRequiredWithoutJobNestedInput = {
    create?: XOR<employerCreateWithoutJobInput, employerUncheckedCreateWithoutJobInput>
    connectOrCreate?: employerCreateOrConnectWithoutJobInput
    upsert?: employerUpsertWithoutJobInput
    connect?: employerWhereUniqueInput
    update?: XOR<XOR<employerUpdateToOneWithWhereWithoutJobInput, employerUpdateWithoutJobInput>, employerUncheckedUpdateWithoutJobInput>
  }

  export type applicationUpdateManyWithoutJobNestedInput = {
    create?: XOR<applicationCreateWithoutJobInput, applicationUncheckedCreateWithoutJobInput> | applicationCreateWithoutJobInput[] | applicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobInput | applicationCreateOrConnectWithoutJobInput[]
    upsert?: applicationUpsertWithWhereUniqueWithoutJobInput | applicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: applicationCreateManyJobInputEnvelope
    set?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    disconnect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    delete?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    update?: applicationUpdateWithWhereUniqueWithoutJobInput | applicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: applicationUpdateManyWithWhereWithoutJobInput | applicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: applicationScalarWhereInput | applicationScalarWhereInput[]
  }

  export type job_categoryUpdateOneRequiredWithoutJobNestedInput = {
    create?: XOR<job_categoryCreateWithoutJobInput, job_categoryUncheckedCreateWithoutJobInput>
    connectOrCreate?: job_categoryCreateOrConnectWithoutJobInput
    upsert?: job_categoryUpsertWithoutJobInput
    connect?: job_categoryWhereUniqueInput
    update?: XOR<XOR<job_categoryUpdateToOneWithWhereWithoutJobInput, job_categoryUpdateWithoutJobInput>, job_categoryUncheckedUpdateWithoutJobInput>
  }

  export type job_typeUpdateOneRequiredWithoutJobNestedInput = {
    create?: XOR<job_typeCreateWithoutJobInput, job_typeUncheckedCreateWithoutJobInput>
    connectOrCreate?: job_typeCreateOrConnectWithoutJobInput
    upsert?: job_typeUpsertWithoutJobInput
    connect?: job_typeWhereUniqueInput
    update?: XOR<XOR<job_typeUpdateToOneWithWhereWithoutJobInput, job_typeUpdateWithoutJobInput>, job_typeUncheckedUpdateWithoutJobInput>
  }

  export type applicationUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<applicationCreateWithoutJobInput, applicationUncheckedCreateWithoutJobInput> | applicationCreateWithoutJobInput[] | applicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobInput | applicationCreateOrConnectWithoutJobInput[]
    upsert?: applicationUpsertWithWhereUniqueWithoutJobInput | applicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: applicationCreateManyJobInputEnvelope
    set?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    disconnect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    delete?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    update?: applicationUpdateWithWhereUniqueWithoutJobInput | applicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: applicationUpdateManyWithWhereWithoutJobInput | applicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: applicationScalarWhereInput | applicationScalarWhereInput[]
  }

  export type jobCreateNestedManyWithoutJob_categoryInput = {
    create?: XOR<jobCreateWithoutJob_categoryInput, jobUncheckedCreateWithoutJob_categoryInput> | jobCreateWithoutJob_categoryInput[] | jobUncheckedCreateWithoutJob_categoryInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_categoryInput | jobCreateOrConnectWithoutJob_categoryInput[]
    createMany?: jobCreateManyJob_categoryInputEnvelope
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
  }

  export type jobUncheckedCreateNestedManyWithoutJob_categoryInput = {
    create?: XOR<jobCreateWithoutJob_categoryInput, jobUncheckedCreateWithoutJob_categoryInput> | jobCreateWithoutJob_categoryInput[] | jobUncheckedCreateWithoutJob_categoryInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_categoryInput | jobCreateOrConnectWithoutJob_categoryInput[]
    createMany?: jobCreateManyJob_categoryInputEnvelope
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
  }

  export type jobUpdateManyWithoutJob_categoryNestedInput = {
    create?: XOR<jobCreateWithoutJob_categoryInput, jobUncheckedCreateWithoutJob_categoryInput> | jobCreateWithoutJob_categoryInput[] | jobUncheckedCreateWithoutJob_categoryInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_categoryInput | jobCreateOrConnectWithoutJob_categoryInput[]
    upsert?: jobUpsertWithWhereUniqueWithoutJob_categoryInput | jobUpsertWithWhereUniqueWithoutJob_categoryInput[]
    createMany?: jobCreateManyJob_categoryInputEnvelope
    set?: jobWhereUniqueInput | jobWhereUniqueInput[]
    disconnect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    delete?: jobWhereUniqueInput | jobWhereUniqueInput[]
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    update?: jobUpdateWithWhereUniqueWithoutJob_categoryInput | jobUpdateWithWhereUniqueWithoutJob_categoryInput[]
    updateMany?: jobUpdateManyWithWhereWithoutJob_categoryInput | jobUpdateManyWithWhereWithoutJob_categoryInput[]
    deleteMany?: jobScalarWhereInput | jobScalarWhereInput[]
  }

  export type jobUncheckedUpdateManyWithoutJob_categoryNestedInput = {
    create?: XOR<jobCreateWithoutJob_categoryInput, jobUncheckedCreateWithoutJob_categoryInput> | jobCreateWithoutJob_categoryInput[] | jobUncheckedCreateWithoutJob_categoryInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_categoryInput | jobCreateOrConnectWithoutJob_categoryInput[]
    upsert?: jobUpsertWithWhereUniqueWithoutJob_categoryInput | jobUpsertWithWhereUniqueWithoutJob_categoryInput[]
    createMany?: jobCreateManyJob_categoryInputEnvelope
    set?: jobWhereUniqueInput | jobWhereUniqueInput[]
    disconnect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    delete?: jobWhereUniqueInput | jobWhereUniqueInput[]
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    update?: jobUpdateWithWhereUniqueWithoutJob_categoryInput | jobUpdateWithWhereUniqueWithoutJob_categoryInput[]
    updateMany?: jobUpdateManyWithWhereWithoutJob_categoryInput | jobUpdateManyWithWhereWithoutJob_categoryInput[]
    deleteMany?: jobScalarWhereInput | jobScalarWhereInput[]
  }

  export type jobCreateNestedManyWithoutJob_typeInput = {
    create?: XOR<jobCreateWithoutJob_typeInput, jobUncheckedCreateWithoutJob_typeInput> | jobCreateWithoutJob_typeInput[] | jobUncheckedCreateWithoutJob_typeInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_typeInput | jobCreateOrConnectWithoutJob_typeInput[]
    createMany?: jobCreateManyJob_typeInputEnvelope
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
  }

  export type jobUncheckedCreateNestedManyWithoutJob_typeInput = {
    create?: XOR<jobCreateWithoutJob_typeInput, jobUncheckedCreateWithoutJob_typeInput> | jobCreateWithoutJob_typeInput[] | jobUncheckedCreateWithoutJob_typeInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_typeInput | jobCreateOrConnectWithoutJob_typeInput[]
    createMany?: jobCreateManyJob_typeInputEnvelope
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
  }

  export type jobUpdateManyWithoutJob_typeNestedInput = {
    create?: XOR<jobCreateWithoutJob_typeInput, jobUncheckedCreateWithoutJob_typeInput> | jobCreateWithoutJob_typeInput[] | jobUncheckedCreateWithoutJob_typeInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_typeInput | jobCreateOrConnectWithoutJob_typeInput[]
    upsert?: jobUpsertWithWhereUniqueWithoutJob_typeInput | jobUpsertWithWhereUniqueWithoutJob_typeInput[]
    createMany?: jobCreateManyJob_typeInputEnvelope
    set?: jobWhereUniqueInput | jobWhereUniqueInput[]
    disconnect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    delete?: jobWhereUniqueInput | jobWhereUniqueInput[]
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    update?: jobUpdateWithWhereUniqueWithoutJob_typeInput | jobUpdateWithWhereUniqueWithoutJob_typeInput[]
    updateMany?: jobUpdateManyWithWhereWithoutJob_typeInput | jobUpdateManyWithWhereWithoutJob_typeInput[]
    deleteMany?: jobScalarWhereInput | jobScalarWhereInput[]
  }

  export type jobUncheckedUpdateManyWithoutJob_typeNestedInput = {
    create?: XOR<jobCreateWithoutJob_typeInput, jobUncheckedCreateWithoutJob_typeInput> | jobCreateWithoutJob_typeInput[] | jobUncheckedCreateWithoutJob_typeInput[]
    connectOrCreate?: jobCreateOrConnectWithoutJob_typeInput | jobCreateOrConnectWithoutJob_typeInput[]
    upsert?: jobUpsertWithWhereUniqueWithoutJob_typeInput | jobUpsertWithWhereUniqueWithoutJob_typeInput[]
    createMany?: jobCreateManyJob_typeInputEnvelope
    set?: jobWhereUniqueInput | jobWhereUniqueInput[]
    disconnect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    delete?: jobWhereUniqueInput | jobWhereUniqueInput[]
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    update?: jobUpdateWithWhereUniqueWithoutJob_typeInput | jobUpdateWithWhereUniqueWithoutJob_typeInput[]
    updateMany?: jobUpdateManyWithWhereWithoutJob_typeInput | jobUpdateManyWithWhereWithoutJob_typeInput[]
    deleteMany?: jobScalarWhereInput | jobScalarWhereInput[]
  }

  export type jobCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<jobCreateWithoutApplicationsInput, jobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: jobCreateOrConnectWithoutApplicationsInput
    connect?: jobWhereUniqueInput
  }

  export type jobseekerCreateNestedOneWithoutApplicationInput = {
    create?: XOR<jobseekerCreateWithoutApplicationInput, jobseekerUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: jobseekerCreateOrConnectWithoutApplicationInput
    connect?: jobseekerWhereUniqueInput
  }

  export type jobUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<jobCreateWithoutApplicationsInput, jobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: jobCreateOrConnectWithoutApplicationsInput
    upsert?: jobUpsertWithoutApplicationsInput
    connect?: jobWhereUniqueInput
    update?: XOR<XOR<jobUpdateToOneWithWhereWithoutApplicationsInput, jobUpdateWithoutApplicationsInput>, jobUncheckedUpdateWithoutApplicationsInput>
  }

  export type jobseekerUpdateOneRequiredWithoutApplicationNestedInput = {
    create?: XOR<jobseekerCreateWithoutApplicationInput, jobseekerUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: jobseekerCreateOrConnectWithoutApplicationInput
    upsert?: jobseekerUpsertWithoutApplicationInput
    connect?: jobseekerWhereUniqueInput
    update?: XOR<XOR<jobseekerUpdateToOneWithWhereWithoutApplicationInput, jobseekerUpdateWithoutApplicationInput>, jobseekerUncheckedUpdateWithoutApplicationInput>
  }

  export type jobseekerCreatejobseeker_skillsInput = {
    set: string[]
  }

  export type userCreateNestedOneWithoutJobseekerInput = {
    create?: XOR<userCreateWithoutJobseekerInput, userUncheckedCreateWithoutJobseekerInput>
    connectOrCreate?: userCreateOrConnectWithoutJobseekerInput
    connect?: userWhereUniqueInput
  }

  export type applicationCreateNestedManyWithoutJobseekerInput = {
    create?: XOR<applicationCreateWithoutJobseekerInput, applicationUncheckedCreateWithoutJobseekerInput> | applicationCreateWithoutJobseekerInput[] | applicationUncheckedCreateWithoutJobseekerInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobseekerInput | applicationCreateOrConnectWithoutJobseekerInput[]
    createMany?: applicationCreateManyJobseekerInputEnvelope
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
  }

  export type applicationUncheckedCreateNestedManyWithoutJobseekerInput = {
    create?: XOR<applicationCreateWithoutJobseekerInput, applicationUncheckedCreateWithoutJobseekerInput> | applicationCreateWithoutJobseekerInput[] | applicationUncheckedCreateWithoutJobseekerInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobseekerInput | applicationCreateOrConnectWithoutJobseekerInput[]
    createMany?: applicationCreateManyJobseekerInputEnvelope
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
  }

  export type jobseekerUpdatejobseeker_skillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userUpdateOneRequiredWithoutJobseekerNestedInput = {
    create?: XOR<userCreateWithoutJobseekerInput, userUncheckedCreateWithoutJobseekerInput>
    connectOrCreate?: userCreateOrConnectWithoutJobseekerInput
    upsert?: userUpsertWithoutJobseekerInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutJobseekerInput, userUpdateWithoutJobseekerInput>, userUncheckedUpdateWithoutJobseekerInput>
  }

  export type applicationUpdateManyWithoutJobseekerNestedInput = {
    create?: XOR<applicationCreateWithoutJobseekerInput, applicationUncheckedCreateWithoutJobseekerInput> | applicationCreateWithoutJobseekerInput[] | applicationUncheckedCreateWithoutJobseekerInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobseekerInput | applicationCreateOrConnectWithoutJobseekerInput[]
    upsert?: applicationUpsertWithWhereUniqueWithoutJobseekerInput | applicationUpsertWithWhereUniqueWithoutJobseekerInput[]
    createMany?: applicationCreateManyJobseekerInputEnvelope
    set?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    disconnect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    delete?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    update?: applicationUpdateWithWhereUniqueWithoutJobseekerInput | applicationUpdateWithWhereUniqueWithoutJobseekerInput[]
    updateMany?: applicationUpdateManyWithWhereWithoutJobseekerInput | applicationUpdateManyWithWhereWithoutJobseekerInput[]
    deleteMany?: applicationScalarWhereInput | applicationScalarWhereInput[]
  }

  export type applicationUncheckedUpdateManyWithoutJobseekerNestedInput = {
    create?: XOR<applicationCreateWithoutJobseekerInput, applicationUncheckedCreateWithoutJobseekerInput> | applicationCreateWithoutJobseekerInput[] | applicationUncheckedCreateWithoutJobseekerInput[]
    connectOrCreate?: applicationCreateOrConnectWithoutJobseekerInput | applicationCreateOrConnectWithoutJobseekerInput[]
    upsert?: applicationUpsertWithWhereUniqueWithoutJobseekerInput | applicationUpsertWithWhereUniqueWithoutJobseekerInput[]
    createMany?: applicationCreateManyJobseekerInputEnvelope
    set?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    disconnect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    delete?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    connect?: applicationWhereUniqueInput | applicationWhereUniqueInput[]
    update?: applicationUpdateWithWhereUniqueWithoutJobseekerInput | applicationUpdateWithWhereUniqueWithoutJobseekerInput[]
    updateMany?: applicationUpdateManyWithWhereWithoutJobseekerInput | applicationUpdateManyWithWhereWithoutJobseekerInput[]
    deleteMany?: applicationScalarWhereInput | applicationScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutEmployerInput = {
    create?: XOR<userCreateWithoutEmployerInput, userUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: userCreateOrConnectWithoutEmployerInput
    connect?: userWhereUniqueInput
  }

  export type jobCreateNestedManyWithoutEmployerInput = {
    create?: XOR<jobCreateWithoutEmployerInput, jobUncheckedCreateWithoutEmployerInput> | jobCreateWithoutEmployerInput[] | jobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: jobCreateOrConnectWithoutEmployerInput | jobCreateOrConnectWithoutEmployerInput[]
    createMany?: jobCreateManyEmployerInputEnvelope
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
  }

  export type jobUncheckedCreateNestedManyWithoutEmployerInput = {
    create?: XOR<jobCreateWithoutEmployerInput, jobUncheckedCreateWithoutEmployerInput> | jobCreateWithoutEmployerInput[] | jobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: jobCreateOrConnectWithoutEmployerInput | jobCreateOrConnectWithoutEmployerInput[]
    createMany?: jobCreateManyEmployerInputEnvelope
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
  }

  export type userUpdateOneRequiredWithoutEmployerNestedInput = {
    create?: XOR<userCreateWithoutEmployerInput, userUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: userCreateOrConnectWithoutEmployerInput
    upsert?: userUpsertWithoutEmployerInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutEmployerInput, userUpdateWithoutEmployerInput>, userUncheckedUpdateWithoutEmployerInput>
  }

  export type jobUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<jobCreateWithoutEmployerInput, jobUncheckedCreateWithoutEmployerInput> | jobCreateWithoutEmployerInput[] | jobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: jobCreateOrConnectWithoutEmployerInput | jobCreateOrConnectWithoutEmployerInput[]
    upsert?: jobUpsertWithWhereUniqueWithoutEmployerInput | jobUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: jobCreateManyEmployerInputEnvelope
    set?: jobWhereUniqueInput | jobWhereUniqueInput[]
    disconnect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    delete?: jobWhereUniqueInput | jobWhereUniqueInput[]
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    update?: jobUpdateWithWhereUniqueWithoutEmployerInput | jobUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: jobUpdateManyWithWhereWithoutEmployerInput | jobUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: jobScalarWhereInput | jobScalarWhereInput[]
  }

  export type jobUncheckedUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<jobCreateWithoutEmployerInput, jobUncheckedCreateWithoutEmployerInput> | jobCreateWithoutEmployerInput[] | jobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: jobCreateOrConnectWithoutEmployerInput | jobCreateOrConnectWithoutEmployerInput[]
    upsert?: jobUpsertWithWhereUniqueWithoutEmployerInput | jobUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: jobCreateManyEmployerInputEnvelope
    set?: jobWhereUniqueInput | jobWhereUniqueInput[]
    disconnect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    delete?: jobWhereUniqueInput | jobWhereUniqueInput[]
    connect?: jobWhereUniqueInput | jobWhereUniqueInput[]
    update?: jobUpdateWithWhereUniqueWithoutEmployerInput | jobUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: jobUpdateManyWithWhereWithoutEmployerInput | jobUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: jobScalarWhereInput | jobScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type jobseekerCreateWithoutUserInput = {
    jobseeker_full_name: string
    jobseeker_phone?: string | null
    jobseeker_resume_url?: string | null
    jobseeker_skills?: jobseekerCreatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: number | null
    jobseeker_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    application?: applicationCreateNestedManyWithoutJobseekerInput
  }

  export type jobseekerUncheckedCreateWithoutUserInput = {
    jobseeker_id?: number
    jobseeker_full_name: string
    jobseeker_phone?: string | null
    jobseeker_resume_url?: string | null
    jobseeker_skills?: jobseekerCreatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: number | null
    jobseeker_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    application?: applicationUncheckedCreateNestedManyWithoutJobseekerInput
  }

  export type jobseekerCreateOrConnectWithoutUserInput = {
    where: jobseekerWhereUniqueInput
    create: XOR<jobseekerCreateWithoutUserInput, jobseekerUncheckedCreateWithoutUserInput>
  }

  export type employerCreateWithoutUserInput = {
    employer_company_name: string
    employer_website?: string | null
    employer_location?: string | null
    employer_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    job?: jobCreateNestedManyWithoutEmployerInput
  }

  export type employerUncheckedCreateWithoutUserInput = {
    employer_id?: number
    employer_company_name: string
    employer_website?: string | null
    employer_location?: string | null
    employer_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    job?: jobUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type employerCreateOrConnectWithoutUserInput = {
    where: employerWhereUniqueInput
    create: XOR<employerCreateWithoutUserInput, employerUncheckedCreateWithoutUserInput>
  }

  export type jobseekerUpsertWithoutUserInput = {
    update: XOR<jobseekerUpdateWithoutUserInput, jobseekerUncheckedUpdateWithoutUserInput>
    create: XOR<jobseekerCreateWithoutUserInput, jobseekerUncheckedCreateWithoutUserInput>
    where?: jobseekerWhereInput
  }

  export type jobseekerUpdateToOneWithWhereWithoutUserInput = {
    where?: jobseekerWhereInput
    data: XOR<jobseekerUpdateWithoutUserInput, jobseekerUncheckedUpdateWithoutUserInput>
  }

  export type jobseekerUpdateWithoutUserInput = {
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: applicationUpdateManyWithoutJobseekerNestedInput
  }

  export type jobseekerUncheckedUpdateWithoutUserInput = {
    jobseeker_id?: IntFieldUpdateOperationsInput | number
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: applicationUncheckedUpdateManyWithoutJobseekerNestedInput
  }

  export type employerUpsertWithoutUserInput = {
    update: XOR<employerUpdateWithoutUserInput, employerUncheckedUpdateWithoutUserInput>
    create: XOR<employerCreateWithoutUserInput, employerUncheckedCreateWithoutUserInput>
    where?: employerWhereInput
  }

  export type employerUpdateToOneWithWhereWithoutUserInput = {
    where?: employerWhereInput
    data: XOR<employerUpdateWithoutUserInput, employerUncheckedUpdateWithoutUserInput>
  }

  export type employerUpdateWithoutUserInput = {
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUpdateManyWithoutEmployerNestedInput
  }

  export type employerUncheckedUpdateWithoutUserInput = {
    employer_id?: IntFieldUpdateOperationsInput | number
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type employerCreateWithoutJobInput = {
    employer_company_name: string
    employer_website?: string | null
    employer_location?: string | null
    employer_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    user: userCreateNestedOneWithoutEmployerInput
  }

  export type employerUncheckedCreateWithoutJobInput = {
    employer_id?: number
    employer_user_id: number
    employer_company_name: string
    employer_website?: string | null
    employer_location?: string | null
    employer_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type employerCreateOrConnectWithoutJobInput = {
    where: employerWhereUniqueInput
    create: XOR<employerCreateWithoutJobInput, employerUncheckedCreateWithoutJobInput>
  }

  export type applicationCreateWithoutJobInput = {
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
    jobseeker: jobseekerCreateNestedOneWithoutApplicationInput
  }

  export type applicationUncheckedCreateWithoutJobInput = {
    application_id?: number
    application_jobseeker_id: number
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
  }

  export type applicationCreateOrConnectWithoutJobInput = {
    where: applicationWhereUniqueInput
    create: XOR<applicationCreateWithoutJobInput, applicationUncheckedCreateWithoutJobInput>
  }

  export type applicationCreateManyJobInputEnvelope = {
    data: applicationCreateManyJobInput | applicationCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type job_categoryCreateWithoutJobInput = {
    job_category_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type job_categoryUncheckedCreateWithoutJobInput = {
    job_category_id?: number
    job_category_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type job_categoryCreateOrConnectWithoutJobInput = {
    where: job_categoryWhereUniqueInput
    create: XOR<job_categoryCreateWithoutJobInput, job_categoryUncheckedCreateWithoutJobInput>
  }

  export type job_typeCreateWithoutJobInput = {
    job_type_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type job_typeUncheckedCreateWithoutJobInput = {
    job_type_id?: number
    job_type_name: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type job_typeCreateOrConnectWithoutJobInput = {
    where: job_typeWhereUniqueInput
    create: XOR<job_typeCreateWithoutJobInput, job_typeUncheckedCreateWithoutJobInput>
  }

  export type employerUpsertWithoutJobInput = {
    update: XOR<employerUpdateWithoutJobInput, employerUncheckedUpdateWithoutJobInput>
    create: XOR<employerCreateWithoutJobInput, employerUncheckedCreateWithoutJobInput>
    where?: employerWhereInput
  }

  export type employerUpdateToOneWithWhereWithoutJobInput = {
    where?: employerWhereInput
    data: XOR<employerUpdateWithoutJobInput, employerUncheckedUpdateWithoutJobInput>
  }

  export type employerUpdateWithoutJobInput = {
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutEmployerNestedInput
  }

  export type employerUncheckedUpdateWithoutJobInput = {
    employer_id?: IntFieldUpdateOperationsInput | number
    employer_user_id?: IntFieldUpdateOperationsInput | number
    employer_company_name?: StringFieldUpdateOperationsInput | string
    employer_website?: NullableStringFieldUpdateOperationsInput | string | null
    employer_location?: NullableStringFieldUpdateOperationsInput | string | null
    employer_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicationUpsertWithWhereUniqueWithoutJobInput = {
    where: applicationWhereUniqueInput
    update: XOR<applicationUpdateWithoutJobInput, applicationUncheckedUpdateWithoutJobInput>
    create: XOR<applicationCreateWithoutJobInput, applicationUncheckedCreateWithoutJobInput>
  }

  export type applicationUpdateWithWhereUniqueWithoutJobInput = {
    where: applicationWhereUniqueInput
    data: XOR<applicationUpdateWithoutJobInput, applicationUncheckedUpdateWithoutJobInput>
  }

  export type applicationUpdateManyWithWhereWithoutJobInput = {
    where: applicationScalarWhereInput
    data: XOR<applicationUpdateManyMutationInput, applicationUncheckedUpdateManyWithoutJobInput>
  }

  export type applicationScalarWhereInput = {
    AND?: applicationScalarWhereInput | applicationScalarWhereInput[]
    OR?: applicationScalarWhereInput[]
    NOT?: applicationScalarWhereInput | applicationScalarWhereInput[]
    application_id?: IntFilter<"application"> | number
    application_job_id?: IntFilter<"application"> | number
    application_jobseeker_id?: IntFilter<"application"> | number
    application_status?: StringFilter<"application"> | string
    application_message?: StringNullableFilter<"application"> | string | null
    application_resume_url?: StringNullableFilter<"application"> | string | null
    is_active?: BoolFilter<"application"> | boolean
    applied_at?: DateTimeFilter<"application"> | Date | string
    updated_at?: DateTimeFilter<"application"> | Date | string
  }

  export type job_categoryUpsertWithoutJobInput = {
    update: XOR<job_categoryUpdateWithoutJobInput, job_categoryUncheckedUpdateWithoutJobInput>
    create: XOR<job_categoryCreateWithoutJobInput, job_categoryUncheckedCreateWithoutJobInput>
    where?: job_categoryWhereInput
  }

  export type job_categoryUpdateToOneWithWhereWithoutJobInput = {
    where?: job_categoryWhereInput
    data: XOR<job_categoryUpdateWithoutJobInput, job_categoryUncheckedUpdateWithoutJobInput>
  }

  export type job_categoryUpdateWithoutJobInput = {
    job_category_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type job_categoryUncheckedUpdateWithoutJobInput = {
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_category_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type job_typeUpsertWithoutJobInput = {
    update: XOR<job_typeUpdateWithoutJobInput, job_typeUncheckedUpdateWithoutJobInput>
    create: XOR<job_typeCreateWithoutJobInput, job_typeUncheckedCreateWithoutJobInput>
    where?: job_typeWhereInput
  }

  export type job_typeUpdateToOneWithWhereWithoutJobInput = {
    where?: job_typeWhereInput
    data: XOR<job_typeUpdateWithoutJobInput, job_typeUncheckedUpdateWithoutJobInput>
  }

  export type job_typeUpdateWithoutJobInput = {
    job_type_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type job_typeUncheckedUpdateWithoutJobInput = {
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_type_name?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobCreateWithoutJob_categoryInput = {
    job_title: string
    job_description: string
    job_location: string
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employer: employerCreateNestedOneWithoutJobInput
    applications?: applicationCreateNestedManyWithoutJobInput
    job_type: job_typeCreateNestedOneWithoutJobInput
  }

  export type jobUncheckedCreateWithoutJob_categoryInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_type_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    job_employer_id: number
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    applications?: applicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type jobCreateOrConnectWithoutJob_categoryInput = {
    where: jobWhereUniqueInput
    create: XOR<jobCreateWithoutJob_categoryInput, jobUncheckedCreateWithoutJob_categoryInput>
  }

  export type jobCreateManyJob_categoryInputEnvelope = {
    data: jobCreateManyJob_categoryInput | jobCreateManyJob_categoryInput[]
    skipDuplicates?: boolean
  }

  export type jobUpsertWithWhereUniqueWithoutJob_categoryInput = {
    where: jobWhereUniqueInput
    update: XOR<jobUpdateWithoutJob_categoryInput, jobUncheckedUpdateWithoutJob_categoryInput>
    create: XOR<jobCreateWithoutJob_categoryInput, jobUncheckedCreateWithoutJob_categoryInput>
  }

  export type jobUpdateWithWhereUniqueWithoutJob_categoryInput = {
    where: jobWhereUniqueInput
    data: XOR<jobUpdateWithoutJob_categoryInput, jobUncheckedUpdateWithoutJob_categoryInput>
  }

  export type jobUpdateManyWithWhereWithoutJob_categoryInput = {
    where: jobScalarWhereInput
    data: XOR<jobUpdateManyMutationInput, jobUncheckedUpdateManyWithoutJob_categoryInput>
  }

  export type jobScalarWhereInput = {
    AND?: jobScalarWhereInput | jobScalarWhereInput[]
    OR?: jobScalarWhereInput[]
    NOT?: jobScalarWhereInput | jobScalarWhereInput[]
    job_id?: IntFilter<"job"> | number
    job_title?: StringFilter<"job"> | string
    job_description?: StringFilter<"job"> | string
    job_location?: StringFilter<"job"> | string
    job_category_id?: IntFilter<"job"> | number
    job_type_id?: IntFilter<"job"> | number
    job_city?: StringNullableFilter<"job"> | string | null
    job_state?: StringNullableFilter<"job"> | string | null
    job_country?: StringNullableFilter<"job"> | string | null
    job_salary?: StringNullableFilter<"job"> | string | null
    job_remote?: BoolNullableFilter<"job"> | boolean | null
    job_tags?: StringNullableListFilter<"job">
    job_employer_id?: IntFilter<"job"> | number
    is_active?: BoolFilter<"job"> | boolean
    created_at?: DateTimeFilter<"job"> | Date | string
    updated_at?: DateTimeFilter<"job"> | Date | string
  }

  export type jobCreateWithoutJob_typeInput = {
    job_title: string
    job_description: string
    job_location: string
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employer: employerCreateNestedOneWithoutJobInput
    applications?: applicationCreateNestedManyWithoutJobInput
    job_category: job_categoryCreateNestedOneWithoutJobInput
  }

  export type jobUncheckedCreateWithoutJob_typeInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    job_employer_id: number
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    applications?: applicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type jobCreateOrConnectWithoutJob_typeInput = {
    where: jobWhereUniqueInput
    create: XOR<jobCreateWithoutJob_typeInput, jobUncheckedCreateWithoutJob_typeInput>
  }

  export type jobCreateManyJob_typeInputEnvelope = {
    data: jobCreateManyJob_typeInput | jobCreateManyJob_typeInput[]
    skipDuplicates?: boolean
  }

  export type jobUpsertWithWhereUniqueWithoutJob_typeInput = {
    where: jobWhereUniqueInput
    update: XOR<jobUpdateWithoutJob_typeInput, jobUncheckedUpdateWithoutJob_typeInput>
    create: XOR<jobCreateWithoutJob_typeInput, jobUncheckedCreateWithoutJob_typeInput>
  }

  export type jobUpdateWithWhereUniqueWithoutJob_typeInput = {
    where: jobWhereUniqueInput
    data: XOR<jobUpdateWithoutJob_typeInput, jobUncheckedUpdateWithoutJob_typeInput>
  }

  export type jobUpdateManyWithWhereWithoutJob_typeInput = {
    where: jobScalarWhereInput
    data: XOR<jobUpdateManyMutationInput, jobUncheckedUpdateManyWithoutJob_typeInput>
  }

  export type jobCreateWithoutApplicationsInput = {
    job_title: string
    job_description: string
    job_location: string
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employer: employerCreateNestedOneWithoutJobInput
    job_category: job_categoryCreateNestedOneWithoutJobInput
    job_type: job_typeCreateNestedOneWithoutJobInput
  }

  export type jobUncheckedCreateWithoutApplicationsInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_type_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    job_employer_id: number
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type jobCreateOrConnectWithoutApplicationsInput = {
    where: jobWhereUniqueInput
    create: XOR<jobCreateWithoutApplicationsInput, jobUncheckedCreateWithoutApplicationsInput>
  }

  export type jobseekerCreateWithoutApplicationInput = {
    jobseeker_full_name: string
    jobseeker_phone?: string | null
    jobseeker_resume_url?: string | null
    jobseeker_skills?: jobseekerCreatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: number | null
    jobseeker_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    user: userCreateNestedOneWithoutJobseekerInput
  }

  export type jobseekerUncheckedCreateWithoutApplicationInput = {
    jobseeker_id?: number
    jobseeker_user_id: number
    jobseeker_full_name: string
    jobseeker_phone?: string | null
    jobseeker_resume_url?: string | null
    jobseeker_skills?: jobseekerCreatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: number | null
    jobseeker_bio?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type jobseekerCreateOrConnectWithoutApplicationInput = {
    where: jobseekerWhereUniqueInput
    create: XOR<jobseekerCreateWithoutApplicationInput, jobseekerUncheckedCreateWithoutApplicationInput>
  }

  export type jobUpsertWithoutApplicationsInput = {
    update: XOR<jobUpdateWithoutApplicationsInput, jobUncheckedUpdateWithoutApplicationsInput>
    create: XOR<jobCreateWithoutApplicationsInput, jobUncheckedCreateWithoutApplicationsInput>
    where?: jobWhereInput
  }

  export type jobUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: jobWhereInput
    data: XOR<jobUpdateWithoutApplicationsInput, jobUncheckedUpdateWithoutApplicationsInput>
  }

  export type jobUpdateWithoutApplicationsInput = {
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: employerUpdateOneRequiredWithoutJobNestedInput
    job_category?: job_categoryUpdateOneRequiredWithoutJobNestedInput
    job_type?: job_typeUpdateOneRequiredWithoutJobNestedInput
  }

  export type jobUncheckedUpdateWithoutApplicationsInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    job_employer_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobseekerUpsertWithoutApplicationInput = {
    update: XOR<jobseekerUpdateWithoutApplicationInput, jobseekerUncheckedUpdateWithoutApplicationInput>
    create: XOR<jobseekerCreateWithoutApplicationInput, jobseekerUncheckedCreateWithoutApplicationInput>
    where?: jobseekerWhereInput
  }

  export type jobseekerUpdateToOneWithWhereWithoutApplicationInput = {
    where?: jobseekerWhereInput
    data: XOR<jobseekerUpdateWithoutApplicationInput, jobseekerUncheckedUpdateWithoutApplicationInput>
  }

  export type jobseekerUpdateWithoutApplicationInput = {
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutJobseekerNestedInput
  }

  export type jobseekerUncheckedUpdateWithoutApplicationInput = {
    jobseeker_id?: IntFieldUpdateOperationsInput | number
    jobseeker_user_id?: IntFieldUpdateOperationsInput | number
    jobseeker_full_name?: StringFieldUpdateOperationsInput | string
    jobseeker_phone?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    jobseeker_skills?: jobseekerUpdatejobseeker_skillsInput | string[]
    jobseeker_experience_years?: NullableIntFieldUpdateOperationsInput | number | null
    jobseeker_bio?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateWithoutJobseekerInput = {
    user_email: string
    user_password: string
    user_role?: $Enums.Role
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employer?: employerCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateWithoutJobseekerInput = {
    user_id?: number
    user_email: string
    user_password: string
    user_role?: $Enums.Role
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employer?: employerUncheckedCreateNestedOneWithoutUserInput
  }

  export type userCreateOrConnectWithoutJobseekerInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutJobseekerInput, userUncheckedCreateWithoutJobseekerInput>
  }

  export type applicationCreateWithoutJobseekerInput = {
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
    job: jobCreateNestedOneWithoutApplicationsInput
  }

  export type applicationUncheckedCreateWithoutJobseekerInput = {
    application_id?: number
    application_job_id: number
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
  }

  export type applicationCreateOrConnectWithoutJobseekerInput = {
    where: applicationWhereUniqueInput
    create: XOR<applicationCreateWithoutJobseekerInput, applicationUncheckedCreateWithoutJobseekerInput>
  }

  export type applicationCreateManyJobseekerInputEnvelope = {
    data: applicationCreateManyJobseekerInput | applicationCreateManyJobseekerInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutJobseekerInput = {
    update: XOR<userUpdateWithoutJobseekerInput, userUncheckedUpdateWithoutJobseekerInput>
    create: XOR<userCreateWithoutJobseekerInput, userUncheckedCreateWithoutJobseekerInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutJobseekerInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutJobseekerInput, userUncheckedUpdateWithoutJobseekerInput>
  }

  export type userUpdateWithoutJobseekerInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: employerUpdateOneWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutJobseekerInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: employerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type applicationUpsertWithWhereUniqueWithoutJobseekerInput = {
    where: applicationWhereUniqueInput
    update: XOR<applicationUpdateWithoutJobseekerInput, applicationUncheckedUpdateWithoutJobseekerInput>
    create: XOR<applicationCreateWithoutJobseekerInput, applicationUncheckedCreateWithoutJobseekerInput>
  }

  export type applicationUpdateWithWhereUniqueWithoutJobseekerInput = {
    where: applicationWhereUniqueInput
    data: XOR<applicationUpdateWithoutJobseekerInput, applicationUncheckedUpdateWithoutJobseekerInput>
  }

  export type applicationUpdateManyWithWhereWithoutJobseekerInput = {
    where: applicationScalarWhereInput
    data: XOR<applicationUpdateManyMutationInput, applicationUncheckedUpdateManyWithoutJobseekerInput>
  }

  export type userCreateWithoutEmployerInput = {
    user_email: string
    user_password: string
    user_role?: $Enums.Role
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    jobseeker?: jobseekerCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateWithoutEmployerInput = {
    user_id?: number
    user_email: string
    user_password: string
    user_role?: $Enums.Role
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    jobseeker?: jobseekerUncheckedCreateNestedOneWithoutUserInput
  }

  export type userCreateOrConnectWithoutEmployerInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutEmployerInput, userUncheckedCreateWithoutEmployerInput>
  }

  export type jobCreateWithoutEmployerInput = {
    job_title: string
    job_description: string
    job_location: string
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    applications?: applicationCreateNestedManyWithoutJobInput
    job_category: job_categoryCreateNestedOneWithoutJobInput
    job_type: job_typeCreateNestedOneWithoutJobInput
  }

  export type jobUncheckedCreateWithoutEmployerInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_type_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    applications?: applicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type jobCreateOrConnectWithoutEmployerInput = {
    where: jobWhereUniqueInput
    create: XOR<jobCreateWithoutEmployerInput, jobUncheckedCreateWithoutEmployerInput>
  }

  export type jobCreateManyEmployerInputEnvelope = {
    data: jobCreateManyEmployerInput | jobCreateManyEmployerInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutEmployerInput = {
    update: XOR<userUpdateWithoutEmployerInput, userUncheckedUpdateWithoutEmployerInput>
    create: XOR<userCreateWithoutEmployerInput, userUncheckedCreateWithoutEmployerInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutEmployerInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutEmployerInput, userUncheckedUpdateWithoutEmployerInput>
  }

  export type userUpdateWithoutEmployerInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    jobseeker?: jobseekerUpdateOneWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutEmployerInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    jobseeker?: jobseekerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type jobUpsertWithWhereUniqueWithoutEmployerInput = {
    where: jobWhereUniqueInput
    update: XOR<jobUpdateWithoutEmployerInput, jobUncheckedUpdateWithoutEmployerInput>
    create: XOR<jobCreateWithoutEmployerInput, jobUncheckedCreateWithoutEmployerInput>
  }

  export type jobUpdateWithWhereUniqueWithoutEmployerInput = {
    where: jobWhereUniqueInput
    data: XOR<jobUpdateWithoutEmployerInput, jobUncheckedUpdateWithoutEmployerInput>
  }

  export type jobUpdateManyWithWhereWithoutEmployerInput = {
    where: jobScalarWhereInput
    data: XOR<jobUpdateManyMutationInput, jobUncheckedUpdateManyWithoutEmployerInput>
  }

  export type applicationCreateManyJobInput = {
    application_id?: number
    application_jobseeker_id: number
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
  }

  export type applicationUpdateWithoutJobInput = {
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    jobseeker?: jobseekerUpdateOneRequiredWithoutApplicationNestedInput
  }

  export type applicationUncheckedUpdateWithoutJobInput = {
    application_id?: IntFieldUpdateOperationsInput | number
    application_jobseeker_id?: IntFieldUpdateOperationsInput | number
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicationUncheckedUpdateManyWithoutJobInput = {
    application_id?: IntFieldUpdateOperationsInput | number
    application_jobseeker_id?: IntFieldUpdateOperationsInput | number
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobCreateManyJob_categoryInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_type_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    job_employer_id: number
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type jobUpdateWithoutJob_categoryInput = {
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: employerUpdateOneRequiredWithoutJobNestedInput
    applications?: applicationUpdateManyWithoutJobNestedInput
    job_type?: job_typeUpdateOneRequiredWithoutJobNestedInput
  }

  export type jobUncheckedUpdateWithoutJob_categoryInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    job_employer_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: applicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type jobUncheckedUpdateManyWithoutJob_categoryInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    job_employer_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobCreateManyJob_typeInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    job_employer_id: number
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type jobUpdateWithoutJob_typeInput = {
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: employerUpdateOneRequiredWithoutJobNestedInput
    applications?: applicationUpdateManyWithoutJobNestedInput
    job_category?: job_categoryUpdateOneRequiredWithoutJobNestedInput
  }

  export type jobUncheckedUpdateWithoutJob_typeInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    job_employer_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: applicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type jobUncheckedUpdateManyWithoutJob_typeInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    job_employer_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicationCreateManyJobseekerInput = {
    application_id?: number
    application_job_id: number
    application_status?: string
    application_message?: string | null
    application_resume_url?: string | null
    is_active?: boolean
    applied_at?: Date | string
    updated_at?: Date | string
  }

  export type applicationUpdateWithoutJobseekerInput = {
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: jobUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type applicationUncheckedUpdateWithoutJobseekerInput = {
    application_id?: IntFieldUpdateOperationsInput | number
    application_job_id?: IntFieldUpdateOperationsInput | number
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type applicationUncheckedUpdateManyWithoutJobseekerInput = {
    application_id?: IntFieldUpdateOperationsInput | number
    application_job_id?: IntFieldUpdateOperationsInput | number
    application_status?: StringFieldUpdateOperationsInput | string
    application_message?: NullableStringFieldUpdateOperationsInput | string | null
    application_resume_url?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    applied_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type jobCreateManyEmployerInput = {
    job_id?: number
    job_title: string
    job_description: string
    job_location: string
    job_category_id: number
    job_type_id: number
    job_city?: string | null
    job_state?: string | null
    job_country?: string | null
    job_salary?: string | null
    job_remote?: boolean | null
    job_tags?: jobCreatejob_tagsInput | string[]
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type jobUpdateWithoutEmployerInput = {
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: applicationUpdateManyWithoutJobNestedInput
    job_category?: job_categoryUpdateOneRequiredWithoutJobNestedInput
    job_type?: job_typeUpdateOneRequiredWithoutJobNestedInput
  }

  export type jobUncheckedUpdateWithoutEmployerInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: applicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type jobUncheckedUpdateManyWithoutEmployerInput = {
    job_id?: IntFieldUpdateOperationsInput | number
    job_title?: StringFieldUpdateOperationsInput | string
    job_description?: StringFieldUpdateOperationsInput | string
    job_location?: StringFieldUpdateOperationsInput | string
    job_category_id?: IntFieldUpdateOperationsInput | number
    job_type_id?: IntFieldUpdateOperationsInput | number
    job_city?: NullableStringFieldUpdateOperationsInput | string | null
    job_state?: NullableStringFieldUpdateOperationsInput | string | null
    job_country?: NullableStringFieldUpdateOperationsInput | string | null
    job_salary?: NullableStringFieldUpdateOperationsInput | string | null
    job_remote?: NullableBoolFieldUpdateOperationsInput | boolean | null
    job_tags?: jobUpdatejob_tagsInput | string[]
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use JobCountOutputTypeDefaultArgs instead
     */
    export type JobCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Job_categoryCountOutputTypeDefaultArgs instead
     */
    export type Job_categoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Job_categoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Job_typeCountOutputTypeDefaultArgs instead
     */
    export type Job_typeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Job_typeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobseekerCountOutputTypeDefaultArgs instead
     */
    export type JobseekerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobseekerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployerCountOutputTypeDefaultArgs instead
     */
    export type EmployerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use jobDefaultArgs instead
     */
    export type jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = jobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use job_categoryDefaultArgs instead
     */
    export type job_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = job_categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use job_typeDefaultArgs instead
     */
    export type job_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = job_typeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use applicationDefaultArgs instead
     */
    export type applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = applicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use jobseekerDefaultArgs instead
     */
    export type jobseekerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = jobseekerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use employerDefaultArgs instead
     */
    export type employerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = employerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}