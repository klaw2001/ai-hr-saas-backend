generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  JOBSEEKER
  EMPLOYER
  ADMIN
}

model user {
  user_id       Int    @id @default(autoincrement())
  user_email    String @unique
  user_password String
  user_role     Role   @default(JOBSEEKER)

  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  jobseeker jobseeker?
  employer  employer?
}

model job {
  job_id          Int    @id @default(autoincrement())
  job_title       String
  job_description String
  job_location    String

  job_category_id Int
  job_type_id     Int
  job_city        String? // optional granularity
  job_state       String? // optional granularity
  job_country     String? // optional granularity
  job_salary      String? // e.g., "₹30,000 - ₹50,000/month"
  job_remote      Boolean? // true if remote job
  job_tags        String[] // for filters/search – e.g., ["react", "nodejs"]

  job_employer_id Int

  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  employer     employer      @relation(fields: [job_employer_id], references: [employer_id])
  applications application[]
  job_category job_category  @relation(fields: [job_category_id], references: [job_category_id])
  job_type     job_type      @relation(fields: [job_type_id], references: [job_type_id])
}

model job_category {
  job_category_id   Int    @id @default(autoincrement())
  job_category_name String

  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  job        job[]
}

model job_type {
  job_type_id   Int    @id @default(autoincrement())
  job_type_name String

  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  job        job[]
}

model application {
  application_id           Int    @id @default(autoincrement())
  application_job_id       Int
  application_jobseeker_id Int
  application_status       String @default("PENDING")
  application_message      String?
  application_resume_url   String?

  is_active  Boolean  @default(true)
  applied_at DateTime @default(now())
  updated_at DateTime @updatedAt

  job       job       @relation(fields: [application_job_id], references: [job_id])
  jobseeker jobseeker @relation(fields: [application_jobseeker_id], references: [jobseeker_id])
}

model jobseeker {
  jobseeker_id               Int      @id @default(autoincrement())
  jobseeker_user_id          Int      @unique
  jobseeker_full_name        String
  jobseeker_phone            String?
  jobseeker_email            String?
  jobseeker_resume_url       String?
  jobseeker_skills           String[] // PostgreSQL Array
  jobseeker_experience_years Int?
  jobseeker_bio              String?
  is_active                  Boolean  @default(true)
  created_at                 DateTime @default(now())
  updated_at                 DateTime @updatedAt

  user        user          @relation(fields: [jobseeker_user_id], references: [user_id])
  application application[]
}

model employer {
  employer_id           Int      @id @default(autoincrement())
  employer_user_id      Int      @unique
  employer_company_name String
  employer_website      String?
  employer_location     String?
  employer_bio          String?
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  user user  @relation(fields: [employer_user_id], references: [user_id])
  job  job[]
}
